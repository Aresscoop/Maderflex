{"remainingRequest":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/manu/Documents/GitHub/Maderflex/src/views/index-social-marketing.vue?vue&type=template&id=f3f2550a&","dependencies":[{"path":"/Users/manu/Documents/GitHub/Maderflex/src/views/index-social-marketing.vue","mtime":1610097020000},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/babel-loader/lib/index.js","mtime":1687166098388},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687166106161},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js","mtime":1687166106161}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}