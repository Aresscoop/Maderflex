{"remainingRequest":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/manu/Documents/GitHub/Maderflex/src/views/index-landing-one.vue?vue&type=template&id=6f1a600b&","dependencies":[{"path":"/Users/manu/Documents/GitHub/Maderflex/src/views/index-landing-one.vue","mtime":1612627664000},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/babel-loader/lib/index.js","mtime":1687166098388},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687166106161},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js","mtime":1687166106161}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPE5hdmJhciA6bmF2LWxpZ2h0PSJ0cnVlIiAvPgoKICA8IS0tIEhlcm8gU3RhcnQgLS0+CiAgPHNlY3Rpb24gY2xhc3M9ImJnLWhhbGYtMjYwIHBiLWxnLTAgcGItbWQtNCBiZy1wcmltYXJ5IGQtdGFibGUgdy0xMDAiPgogICAgPGRpdiBjbGFzcz0iYmctb3ZlcmxheSBiZy1ibGFjayIgc3R5bGU9Im9wYWNpdHk6IDAuOCI+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgcG9zaXRpb24tcmVsYXRpdmUiIHN0eWxlPSJ6LWluZGV4OiAxIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyBjb2wtMTIgbXQtbGctNSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1oZWFkaW5nIj4KICAgICAgICAgICAgPGgxIGNsYXNzPSJoZWFkaW5nIHRleHQtd2hpdGUgdGl0bGUtZGFyayBtYi00Ij4KICAgICAgICAgICAgICBCbHVpZCB5b3VyIGF1ZGlhbmNlIDxiciAvPgogICAgICAgICAgICAgIGFuZCBzYWxlIG1vcmUKICAgICAgICAgICAgPC9oMT4KICAgICAgICAgICAgPHAgY2xhc3M9InBhcmEtZGVzYyB0ZXh0LXdoaXRlLTUwIj4KICAgICAgICAgICAgICBMYXVuY2ggeW91ciBjYW1wYWlnbiBhbmQgYmVuZWZpdCBmcm9tIG91ciBleHBlcnRpc2Ugb24gZGVzaWduaW5nCiAgICAgICAgICAgICAgYW5kIG1hbmFnaW5nIGNvbnZlcnNpb24gY2VudGVyZWQgYm9vdHN0cmFwNCBodG1sIHBhZ2UuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id2F0Y2gtdmlkZW8gbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbWItMiIKICAgICAgICAgICAgICAgID5HZXQgU3RhcnRlZDwvYQogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDogdm9pZCgwKTsiCiAgICAgICAgICAgICAgICB2LWItbW9kYWwubW9kYWwtMgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgdmlkZW8tcGxheS1pY29uIGJ0bi1wcmltYXJ5IG0tMSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dmlkZW8taWNvbiBjbGFzcz0iaWNvbnMiPjwvdmlkZW8taWNvbj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPGItbW9kYWwKICAgICAgICAgICAgICAgIGlkPSJtb2RhbC0yIgogICAgICAgICAgICAgICAgaGlkZS1mb290ZXIKICAgICAgICAgICAgICAgIHNpemU9ImxnIgogICAgICAgICAgICAgICAgaGVhZGVyLWNsb3NlLXZhcmlhbnQ9IndoaXRlIgogICAgICAgICAgICAgICAgaGVhZGVyLWNsYXNzPSJib3JkZXItMCIKICAgICAgICAgICAgICAgIGNvbnRlbnQtY2xhc3M9ImJvcmRlci0wIgogICAgICAgICAgICAgICAgY2VudGVyZWQKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8eW91dHViZQogICAgICAgICAgICAgICAgICB2aWRlby1pZD0iak5UWnBmWFlKYTQiCiAgICAgICAgICAgICAgICAgIHJlZj0ieW91dHViZSIKICAgICAgICAgICAgICAgICAgd2lkdGg9Ijc1MCIKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSI0NTAiCiAgICAgICAgICAgICAgICAgIDpwbGF5ZXItdmFycz0icGxheWVyVmFycyIKICAgICAgICAgICAgICAgID48L3lvdXR1YmU+CiAgICAgICAgICAgICAgPC9iLW1vZGFsPgogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXVwcGVyY2FzZSB0ZXh0LXdoaXRlLTUwIHNtYWxsIGFsaWduLW1pZGRsZSBtbC0yIgogICAgICAgICAgICAgICAgPldhdGNoIE5vdzwvc3BhbgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSBjb2wtMTIgbXQtNCBwdC0yIG10LXNtLTAgcHQtc20tMCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzaGFwZS1iZWZvcmUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1jZWxsIj4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9sYW5kaW5nLzIuanBnIgogICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCByb3VuZGVkLW1kIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaGFwZXMvc2hhcGUxLnBuZyIKICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIHNoYXBlLWltZyIKICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICA8ZGl2IGNsYXNzPSJzaGFwZSBvdmVyZmxvdy1oaWRkZW4gdGV4dC13aGl0ZSI+CiAgICAgIDxzdmcKICAgICAgICB2aWV3Qm94PSIwIDAgMjg4MCAyNTAiCiAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgID4KICAgICAgICA8cGF0aAogICAgICAgICAgZD0iTTcyMCAxMjVMMjE2MCAwSDI4ODBWMjUwSDBWMTI1SDcyMFoiCiAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgPjwvcGF0aD4KICAgICAgPC9zdmc+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8IS0tIEhlcm8gRW5kIC0tPgoKICA8IS0tIFN0YXJ0IC0tPgogIDxzZWN0aW9uIGNsYXNzPSJzZWN0aW9uIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LW9udGVudC1jZW50ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXRpdGxlIHRleHQtY2VudGVyIG1iLTQgcGItMiI+CiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUgbWItNCI+U29sdXRpb25zIG1hZGUgZm9yIHlvdTwvaDQ+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIHBhcmEtZGVzYyBtYi0wIG14LWF1dG8iPgogICAgICAgICAgICAgIFN0YXJ0IHdvcmtpbmcgd2l0aAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCI+TGFuZHJpY2s8L3NwYW4+IHRoYXQKICAgICAgICAgICAgICBjYW4gcHJvdmlkZSBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGdlbmVyYXRlIGF3YXJlbmVzcywgZHJpdmUKICAgICAgICAgICAgICB0cmFmZmljLCBjb25uZWN0LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KCiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYgbXQtNCBwdC0yIj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9Im1lZGlhIGtleS1mZWF0dXJlIGFsaWduLWl0ZW1zLWNlbnRlciBwLTMgcm91bmRlZC1tZCBzaGFkb3ciCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24gdGV4dC1jZW50ZXIgcm91bmRlZC1jaXJjbGUgbXItMyI+CiAgICAgICAgICAgICAgPG1vbml0b3ItaWNvbgogICAgICAgICAgICAgICAgY2xhc3M9ImZlYSBpY29uLWV4LW1kIHRleHQtcHJpbWFyeSIKICAgICAgICAgICAgICA+PC9tb25pdG9yLWljb24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTAiPkZ1bGx5IFJlc3BvbnNpdmU8L2g0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02IG10LTQgcHQtMiI+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSJtZWRpYSBrZXktZmVhdHVyZSBhbGlnbi1pdGVtcy1jZW50ZXIgcC0zIHJvdW5kZWQtbWQgc2hhZG93IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIHRleHQtY2VudGVyIHJvdW5kZWQtY2lyY2xlIG1yLTMiPgogICAgICAgICAgICAgIDxoZWFydC1pY29uIGNsYXNzPSJmZWEgaWNvbi1leC1tZCB0ZXh0LXByaW1hcnkiPjwvaGVhcnQtaWNvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUgbWItMCI+QnJvd3NlciBDb21wYXRpYmlsaXR5PC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNiBtdC00IHB0LTIiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0ibWVkaWEga2V5LWZlYXR1cmUgYWxpZ24taXRlbXMtY2VudGVyIHAtMyByb3VuZGVkLW1kIHNoYWRvdyIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiB0ZXh0LWNlbnRlciByb3VuZGVkLWNpcmNsZSBtci0zIj4KICAgICAgICAgICAgICA8ZXllLWljb24gY2xhc3M9ImZlYSBpY29uLWV4LW1kIHRleHQtcHJpbWFyeSI+PC9leWUtaWNvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUgbWItMCI+UmV0aW5hIFJlYWR5PC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNiBtdC00IHB0LTIiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0ibWVkaWEga2V5LWZlYXR1cmUgYWxpZ24taXRlbXMtY2VudGVyIHAtMyByb3VuZGVkLW1kIHNoYWRvdyIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiB0ZXh0LWNlbnRlciByb3VuZGVkLWNpcmNsZSBtci0zIj4KICAgICAgICAgICAgICA8Ym9sZC1pY29uIGNsYXNzPSJmZWEgaWNvbi1leC1tZCB0ZXh0LXByaW1hcnkiPjwvYm9sZC1pY29uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi0wIj5CYXNlZCBPbiBCb290c3RyYXAgNDwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYgbXQtNCBwdC0yIj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9Im1lZGlhIGtleS1mZWF0dXJlIGFsaWduLWl0ZW1zLWNlbnRlciBwLTMgcm91bmRlZC1tZCBzaGFkb3ciCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24gdGV4dC1jZW50ZXIgcm91bmRlZC1jaXJjbGUgbXItMyI+CiAgICAgICAgICAgICAgPGZlYXRoZXItaWNvbgogICAgICAgICAgICAgICAgY2xhc3M9ImZlYSBpY29uLWV4LW1kIHRleHQtcHJpbWFyeSIKICAgICAgICAgICAgICA+PC9mZWF0aGVyLWljb24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTAiPkZlYXRoZXIgSWNvbnM8L2g0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02IG10LTQgcHQtMiI+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSJtZWRpYSBrZXktZmVhdHVyZSBhbGlnbi1pdGVtcy1jZW50ZXIgcC0zIHJvdW5kZWQtbWQgc2hhZG93IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIHRleHQtY2VudGVyIHJvdW5kZWQtY2lyY2xlIG1yLTMiPgogICAgICAgICAgICAgIDxjb2RlLWljb24gY2xhc3M9ImZlYSBpY29uLWV4LW1kIHRleHQtcHJpbWFyeSI+PC9jb2RlLWljb24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTAiPkJ1aWx0IFdpdGggU0FTUzwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYgbXQtNCBwdC0yIj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9Im1lZGlhIGtleS1mZWF0dXJlIGFsaWduLWl0ZW1zLWNlbnRlciBwLTMgcm91bmRlZC1tZCBzaGFkb3ciCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24gdGV4dC1jZW50ZXIgcm91bmRlZC1jaXJjbGUgbXItMyI+CiAgICAgICAgICAgICAgPHVzZXItY2hlY2staWNvbgogICAgICAgICAgICAgICAgY2xhc3M9ImZlYSBpY29uLWV4LW1kIHRleHQtcHJpbWFyeSIKICAgICAgICAgICAgICA+PC91c2VyLWNoZWNrLWljb24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTAiPlczYyBWYWxpZCBDb2RlPC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNiBtdC00IHB0LTIiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0ibWVkaWEga2V5LWZlYXR1cmUgYWxpZ24taXRlbXMtY2VudGVyIHAtMyByb3VuZGVkLW1kIHNoYWRvdyIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiB0ZXh0LWNlbnRlciByb3VuZGVkLWNpcmNsZSBtci0zIj4KICAgICAgICAgICAgICA8Z2l0LW1lcmdlLWljb24KICAgICAgICAgICAgICAgIGNsYXNzPSJmZWEgaWNvbi1leC1tZCB0ZXh0LXByaW1hcnkiCiAgICAgICAgICAgICAgPjwvZ2l0LW1lcmdlLWljb24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTAiPkZsYXRpY29uIEljb25zPC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNiBtdC00IHB0LTIiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0ibWVkaWEga2V5LWZlYXR1cmUgYWxpZ24taXRlbXMtY2VudGVyIHAtMyByb3VuZGVkLW1kIHNoYWRvdyIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiB0ZXh0LWNlbnRlciByb3VuZGVkLWNpcmNsZSBtci0zIj4KICAgICAgICAgICAgICA8c2V0dGluZ3MtaWNvbgogICAgICAgICAgICAgICAgY2xhc3M9ImZlYSBpY29uLWV4LW1kIHRleHQtcHJpbWFyeSIKICAgICAgICAgICAgICA+PC9zZXR0aW5ncy1pY29uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi0wIj5FYXN5IHRvIGN1c3RvbWl6ZTwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG10LTQgcHQtMiB0ZXh0LWNlbnRlciI+CiAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiCiAgICAgICAgICAgID5TZWUgTW9yZSA8aSBjbGFzcz0ibWRpIG1kaS1hcnJvdy1yaWdodCI+PC9pCiAgICAgICAgICA+PC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZWQgY29udGFpbmVyLS0+CgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIG10LTEwMCBtdC02MCI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSB0ZXh0LWNlbnRlciB0ZXh0LWxnLWxlZnQiPgogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTQiPgogICAgICAgICAgICAgIFRydXN0ZWQgY2xpZW50IGJ5IG92ZXIgPGJyIC8+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSI+MTAwMDArPC9zcGFuPiBvZiB0aGUgd29ybGTigJlzCiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAgbXgtYXV0byBwYXJhLWRlc2MiPgogICAgICAgICAgICAgIFN0YXJ0IHdvcmtpbmcgd2l0aAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCI+TGFuZHJpY2s8L3NwYW4+IHRoYXQKICAgICAgICAgICAgICBjYW4gcHJvdmlkZSBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGdlbmVyYXRlIGF3YXJlbmVzcywgZHJpdmUKICAgICAgICAgICAgICB0cmFmZmljLCBjb25uZWN0LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciIGlkPSJjb3VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgbXQtNCBtdC1sZy0wIHB0LTIgcHQtbGctMCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICA8aDEgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICAgICAgICA8Y291bnRUbwogICAgICAgICAgICAgICAgICAgIDpzdGFydFZhbD0iMSIKICAgICAgICAgICAgICAgICAgICA6ZHVyYXRpb249IjQwMDAiCiAgICAgICAgICAgICAgICAgICAgOmVuZFZhbD0iMTAwMDAiCiAgICAgICAgICAgICAgICAgID48L2NvdW50VG8KICAgICAgICAgICAgICAgICAgPisKICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCBoNSI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktaGVhcnQgdGV4dC1kYW5nZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1oZWFydCB0ZXh0LWRhbmdlciI+PC9pPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWhlYXJ0IHRleHQtZGFuZ2VyIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktaGVhcnQgdGV4dC1kYW5nZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1oZWFydCB0ZXh0LWRhbmdlciI+PC9pPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxoNj5UcnVzdGVkIFVzZXJzPC9oNj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBtdC00IG10LWxnLTAgcHQtMiBwdC1sZy0wIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgICAgICAgIDxjb3VudFRvCiAgICAgICAgICAgICAgICAgICAgOnN0YXJ0VmFsPSIxIgogICAgICAgICAgICAgICAgICAgIDpkdXJhdGlvbj0iNDAwMCIKICAgICAgICAgICAgICAgICAgICA6ZW5kVmFsPSIxNDAyIgogICAgICAgICAgICAgICAgICA+PC9jb3VudFRvCiAgICAgICAgICAgICAgICAgID4rCiAgICAgICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAgaDUiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8aDY+VXNlcnMgUmV2aWV3PC9oNj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1vbnRlbnQtY2VudGVyIG10LTQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtNiB0ZXh0LWNlbnRlciBweS00Ij4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jbGllbnQvYW1hem9uLnN2ZyIKICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLWV4LXNtIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtNiB0ZXh0LWNlbnRlciBweS00Ij4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jbGllbnQvZ29vZ2xlLnN2ZyIKICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLWV4LXNtIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtNiB0ZXh0LWNlbnRlciBweS00Ij4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jbGllbnQvbGVub3ZvLnN2ZyIKICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLWV4LXNtIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtNiB0ZXh0LWNlbnRlciBweS00Ij4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jbGllbnQvcGF5cGFsLnN2ZyIKICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLWV4LXNtIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KICAgIDwvZGl2PgogICAgPCEtLWVuZCBjb250YWluZXItLT4KICA8L3NlY3Rpb24+CiAgPCEtLWVuZCBzZWN0aW9uLS0+CiAgPCEtLSBFbmQgLS0+CgogIDwhLS0gU3RhcnQgLS0+CiAgPHNlY3Rpb24gY2xhc3M9InNlY3Rpb24gcHQtMCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHRleHQtY2VudGVyIj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9InZpZGVvLXNvbHV0aW9uLWN0YSBwb3NpdGlvbi1yZWxhdGl2ZSIKICAgICAgICAgICAgc3R5bGU9InotaW5kZXg6IDEiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1hZ2VzL3NhYXMvY2xhc3NpYzAxLnBuZyIgY2xhc3M9ImltZy1mbHVpZCIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGxheS1pY29uIj4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6IHZvaWQoMCk7IgogICAgICAgICAgICAgICAgICB2LWItbW9kYWwubW9kYWwtMgogICAgICAgICAgICAgICAgICBjbGFzcz0icGxheS1idG4gdmlkZW8tcGxheS1pY29uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZGkgbWRpLXBsYXkgdGV4dC1wcmltYXJ5IHJvdW5kZWQtY2lyY2xlIGJnLXdoaXRlIHNoYWRvdy1sZyIKICAgICAgICAgICAgICAgICAgPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxiLW1vZGFsCiAgICAgICAgICAgICAgICAgIGlkPSJtb2RhbC0yIgogICAgICAgICAgICAgICAgICBoaWRlLWZvb3RlcgogICAgICAgICAgICAgICAgICBzaXplPSJsZyIKICAgICAgICAgICAgICAgICAgaGVhZGVyLWNsb3NlLXZhcmlhbnQ9IndoaXRlIgogICAgICAgICAgICAgICAgICBoZWFkZXItY2xhc3M9ImJvcmRlci0wIgogICAgICAgICAgICAgICAgICBjb250ZW50LWNsYXNzPSJib3JkZXItMCIKICAgICAgICAgICAgICAgICAgY2VudGVyZWQKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHlvdXR1YmUKICAgICAgICAgICAgICAgICAgICB2aWRlby1pZD0iak5UWnBmWFlKYTQiCiAgICAgICAgICAgICAgICAgICAgcmVmPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgICAgIHdpZHRoPSI3NTAiCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSI0NTAiCiAgICAgICAgICAgICAgICAgICAgOnBsYXllci12YXJzPSJwbGF5ZXJWYXJzIgogICAgICAgICAgICAgICAgICA+PC95b3V0dWJlPgogICAgICAgICAgICAgICAgPC9iLW1vZGFsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCBtdC1tZC00IHB0LW1kLTIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXRpdGxlIHRleHQtbWQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC13aGl0ZS01MCI+Q3VzdG9tZXJzIG5lZWRzPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSB0ZXh0LXdoaXRlIG1iLTAgdGl0bGUtZGFyayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udHJvbCBFdmVyeXRoaW5nIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIGluIGEgc2luZ2xlIHBsYWNlCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgY29sLTEyIG10LTQgcHQtbWQtMiI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXRpdGxlIHRleHQtbWQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXdoaXRlLTUwIHBhcmEtZGVzYyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQgd29ya2luZyB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtbGlnaHQgdGl0bGUtZGFyayI+TGFuZHJpY2s8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBjYW4gcHJvdmlkZSBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGdlbmVyYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhcmVuZXNzLCBkcml2ZSB0cmFmZmljLCBjb25uZWN0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWxpZ2h0IHRpdGxlLWRhcmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlJlYWQgTW9yZQogICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnJvdy1yaWdodC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmVhIGljb24tc20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYXJyb3ctcmlnaHQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgPC9kaXY+CiAgICAgIDwhLS1lbmQgcm93IC0tPgogICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLXBvc3RzLXBsYWNlaG9sZGVyIGJnLXByaW1hcnkiPjwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8IS0tIEVuZCAtLT4KCiAgPCEtLSBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNSBjb2wtbWQtNiI+CiAgICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaW1hZ2VzL2NvdXJzZS9vbmxpbmUvYWIwMS5qcGciCiAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZC1tZCBzaGFkb3ctbGciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNyBjb2wtbWQtNiBtdC00IHB0LTIgbXQtc20tMCBwdC1zbS0wIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24tdGl0bGUgdGV4dC1tZC1sZWZ0IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij4KICAgICAgICAgICAgICBDb2xsYWJvcmF0ZSB3aXRoIHlvdXIgPGJyIC8+CiAgICAgICAgICAgICAgdGVhbSBhbnl0aW1lIGFuZCBhbnl3aGFyZS4KICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgbWItMCBwYXJhLWRlc2MiPgogICAgICAgICAgICAgIFN0YXJ0IHdvcmtpbmcgd2l0aAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCI+TGFuZHJpY2s8L3NwYW4+IHRoYXQKICAgICAgICAgICAgICBjYW4gcHJvdmlkZSBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGdlbmVyYXRlIGF3YXJlbmVzcywgZHJpdmUKICAgICAgICAgICAgICB0cmFmZmljLCBjb25uZWN0LgogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBhbGlnbi1pdGVtcy1jZW50ZXIgdGV4dC1sZWZ0IG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1wcmltYXJ5IGg0IG1iLTAgbXItMyBwLTMgcm91bmRlZC1tZCBzaGFkb3ciPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9InVpbCB1aWwtY2FwdHVyZSI+PC9pPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1kYXJrIGg2IgogICAgICAgICAgICAgICAgICA+RmluZCBCZXR0ZXIgTGVhZHM8L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBhbGlnbi1pdGVtcy1jZW50ZXIgdGV4dC1sZWZ0IG10LTQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtcHJpbWFyeSBoNCBtYi0wIG1yLTMgcC0zIHJvdW5kZWQtbWQgc2hhZG93Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ1aWwgdWlsLWZpbGUiPjwvaT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRleHQtZGFyayBoNiIKICAgICAgICAgICAgICAgICAgPlNldCBJbnN0YW50IE1ldHRpbmc8L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBhbGlnbi1pdGVtcy1jZW50ZXIgdGV4dC1sZWZ0IG10LTQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtcHJpbWFyeSBoNCBtYi0wIG1yLTMgcC0zIHJvdW5kZWQtbWQgc2hhZG93Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ1aWwgdWlsLWNyZWRpdC1jYXJkLXNlYXJjaCI+PC9pPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1kYXJrIGg2IgogICAgICAgICAgICAgICAgICA+R2V0IFBhaWQgU2VlbWxlc3NseTwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBtdC0xMDAgbXQtNjAiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNSBjb2wtbWQtNiBvcmRlci0xIG9yZGVyLW1kLTIiPgogICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1yaWdodCI+CiAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jb3Vyc2Uvb25saW5lL2FiMDMuanBnIgogICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZC1tZCBzaGFkb3ctbGciCiAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0iY29sLWxnLTcgY29sLW1kLTYgb3JkZXItMiBvcmRlci1tZC0xIG10LTQgcHQtMiBtdC1zbS0wIHB0LXNtLTAiCiAgICAgICAgPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSB0ZXh0LW1kLWxlZnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTQiPgogICAgICAgICAgICAgIFdoYXRzIG91ciBjbGllbnRzIHNhaWQgPGJyIC8+CiAgICAgICAgICAgICAgYWJvdXQgbGFuZHJpY2sgcHJvamVjdAogICAgICAgICAgICA8L2g0PgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIHBhcmEtZGVzYyI+CiAgICAgICAgICAgICAgU3RhcnQgd29ya2luZyB3aXRoCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkIj5MYW5kcmljazwvc3Bhbj4gdGhhdAogICAgICAgICAgICAgIGNhbiBwcm92aWRlIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8gZ2VuZXJhdGUgYXdhcmVuZXNzLCBkcml2ZQogICAgICAgICAgICAgIHRyYWZmaWMsIGNvbm5lY3QuCiAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIgbXQtNCI+CiAgICAgICAgICAgICAgICA8Y2Fyb3VzZWwKICAgICAgICAgICAgICAgICAgaWQ9InNpbmdsZS1vd2wiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvd2wtY2Fyb3VzZWwgb3dsLXRoZW1lIgogICAgICAgICAgICAgICAgICBkaXI9Imx0ciIKICAgICAgICAgICAgICAgICAgOnBlci1wYWdlPSIxIgogICAgICAgICAgICAgICAgICA6bG9vcD0idHJ1ZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPFNsaWRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGN1c3RvbWVyLXRlc3RpIG0tMiI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL2NsaWVudC8wMS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLXNtYWxsIG1yLTMgcm91bmRlZCBzaGFkb3ciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lZGlhLWJvZHkgY29udGVudCBwLTMgc2hhZG93IHJvdW5kZWQgYmctd2hpdGUgcG9zaXRpb24tcmVsYXRpdmUiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICIgSXQgc2VlbXMgdGhhdCBvbmx5IGZyYWdtZW50cyBvZiB0aGUgb3JpZ2luYWwgdGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbiBpbiB0aGUgTG9yZW0gSXBzdW0gdGV4dHMgdXNlZCB0b2RheS4gIgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAtIFRob21hcyBJc3JhZWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPkMuRS5PPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L1NsaWRlPgogICAgICAgICAgICAgICAgICA8U2xpZGU+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEgY3VzdG9tZXItdGVzdGkgbS0yIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvY2xpZW50LzAyLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImF2YXRhciBhdmF0YXItc21hbGwgbXItMyByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVkaWEtYm9keSBjb250ZW50IHAtMyBzaGFkb3cgcm91bmRlZCBiZy13aGl0ZSBwb3NpdGlvbi1yZWxhdGl2ZSIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXItaGFsZiB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAiIE9uZSBkaXNhZHZhbnRhZ2Ugb2YgTG9ydW0gSXBzdW0gaXMgdGhhdCBpbiBMYXRpbgogICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRhaW4gbGV0dGVycyBhcHBlYXIgbW9yZSBmcmVxdWVudGx5IHRoYW4gb3RoZXJzLgogICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgLSBCYXJiYXJhIE1jSW50b3NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj5NLkQ8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvU2xpZGU+CiAgICAgICAgICAgICAgICAgIDxTbGlkZT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBjdXN0b21lci10ZXN0aSBtLTIiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jbGllbnQvMDMuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYXZhdGFyIGF2YXRhci1zbWFsbCBtci0zIHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZWRpYS1ib2R5IGNvbnRlbnQgcC0zIHNoYWRvdyByb3VuZGVkIGJnLXdoaXRlIHBvc2l0aW9uLXJlbGF0aXZlIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAiIFRoZSBtb3N0IHdlbGwta25vd24gZHVtbXkgdGV4dCBpcyB0aGUgJ0xvcmVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgSXBzdW0nLCB3aGljaCBpcyBzYWlkIHRvIGhhdmUgb3JpZ2luYXRlZCBpbiB0aGUgMTZ0aAogICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnR1cnkuICIKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgLSBDYXJsIE9saXZlciA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPlAuQTwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9TbGlkZT4KICAgICAgICAgICAgICAgICAgPFNsaWRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGN1c3RvbWVyLXRlc3RpIG0tMiI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL2NsaWVudC8wNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLXNtYWxsIG1yLTMgcm91bmRlZCBzaGFkb3ciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lZGlhLWJvZHkgY29udGVudCBwLTMgc2hhZG93IHJvdW5kZWQgYmctd2hpdGUgcG9zaXRpb24tcmVsYXRpdmUiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICIgQWNjb3JkaW5nIHRvIG1vc3Qgc291cmNlcywgTG9ydW0gSXBzdW0gY2FuIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VkIGJhY2sgdG8gYSB0ZXh0IGNvbXBvc2VkIGJ5IENpY2Vyby4gIgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAtIENocmlzdGEgU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPk1hbmFnZXI8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvU2xpZGU+CiAgICAgICAgICAgICAgICAgIDxTbGlkZT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBjdXN0b21lci10ZXN0aSBtLTIiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jbGllbnQvMDUuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYXZhdGFyIGF2YXRhci1zbWFsbCBtci0zIHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZWRpYS1ib2R5IGNvbnRlbnQgcC0zIHNoYWRvdyByb3VuZGVkIGJnLXdoaXRlIHBvc2l0aW9uLXJlbGF0aXZlIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAiIFRoZXJlIGlzIG5vdyBhbiBhYnVuZGFuY2Ugb2YgcmVhZGFibGUgZHVtbXkgdGV4dHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlc2UgYXJlIHVzdWFsbHkgdXNlZCB3aGVuIGEgdGV4dCBpcyByZXF1aXJlZC4gIgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAtIERlYW4gVG9sbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPkRldmVsb3Blcjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9TbGlkZT4KICAgICAgICAgICAgICAgICAgPFNsaWRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGN1c3RvbWVyLXRlc3RpIG0tMiI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL2NsaWVudC8wNi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLXNtYWxsIG1yLTMgcm91bmRlZCBzaGFkb3ciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lZGlhLWJvZHkgY29udGVudCBwLTMgc2hhZG93IHJvdW5kZWQgYmctd2hpdGUgcG9zaXRpb24tcmVsYXRpdmUiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICIgVGh1cywgTG9yZW0gSXBzdW0gaGFzIG9ubHkgbGltaXRlZCBzdWl0YWJpbGl0eSBhcwogICAgICAgICAgICAgICAgICAgICAgICAgIGEgdmlzdWFsIGZpbGxlciBmb3IgR2VybWFuIHRleHRzLiAiCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgIC0gSmlsbCBXZWJiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj5EZXNpZ25lcjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9TbGlkZT4KICAgICAgICAgICAgICAgIDwvY2Fyb3VzZWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KICAgIDwvZGl2PgogICAgPCEtLWVuZCBjb250YWluZXItLT4KCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXQtMTAwIG10LTYwIj4KICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiB0ZXh0LWNlbnRlciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXRpdGxlIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij4KICAgICAgICAgICAgICBTZWUgZXZlcnl0aGluZyBhYm91dCB5b3VyIGVtcGxveWVlIGF0IG9uZSBwbGFjZS4KICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgcGFyYS1kZXNjIG14LWF1dG8gbWItMCI+CiAgICAgICAgICAgICAgU3RhcnQgd29ya2luZyB3aXRoCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkIj5MYW5kcmljazwvc3Bhbj4gdGhhdAogICAgICAgICAgICAgIGNhbiBwcm92aWRlIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8gZ2VuZXJhdGUgYXdhcmVuZXNzLCBkcml2ZQogICAgICAgICAgICAgIHRyYWZmaWMsIGNvbm5lY3QuCiAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTQiPgogICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtdC0yIG1yLTIiCiAgICAgICAgICAgICAgICA+R2V0IFN0YXJ0ZWQgTm93PC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgbXQtMiIKICAgICAgICAgICAgICAgID5GcmVlIFRyaWFsPC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8IS0tIEVuZCAtLT4KCiAgPCEtLWVuZCBzZWN0aW9uLS0+CiAgPEZvb3RlciAvPgogIDwhLS0gRm9vdGVyIEVuZCAtLT4KICA8U3dpdGNoZXIgLz4KICA8IS0tIEJhY2sgdG8gdG9wIC0tPgogIDxhCiAgICBocmVmPSJqYXZhc2NyaXB0OiB2b2lkKDApOyIKICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXByaW1hcnkgYmFjay10by10b3AiCiAgICBpZD0iYmFjay10by10b3AiCiAgICB2LXNjcm9sbC10bz0iJyN0b3BuYXYnIgogID4KICAgIDxhcnJvdy11cC1pY29uIGNsYXNzPSJpY29ucyI+PC9hcnJvdy11cC1pY29uPgogIDwvYT4KICA8IS0tIEJhY2sgdG8gdG9wIC0tPgo8L2Rpdj4K"},null]}