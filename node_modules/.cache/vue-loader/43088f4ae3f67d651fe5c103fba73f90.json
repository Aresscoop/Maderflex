{"remainingRequest":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/manu/Documents/GitHub/Maderflex/src/views/shop-lists.vue?vue&type=template&id=05bc0ed0&","dependencies":[{"path":"/Users/manu/Documents/GitHub/Maderflex/src/views/shop-lists.vue","mtime":1612625742000},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/babel-loader/lib/index.js","mtime":1687166098388},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687166106161},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js","mtime":1687166106161}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPE5hdmJhciAvPgoKICA8IS0tIEhlcm8gU3RhcnQgLS0+CiAgPHNlY3Rpb24gY2xhc3M9ImJnLWhhbGYgYmctbGlnaHQgZC10YWJsZSB3LTEwMCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIHRleHQtY2VudGVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InBhZ2UtbmV4dC1sZXZlbCI+CiAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPkFsbCBQcm9kdWN0czwvaDQ+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhZ2UtbmV4dCI+CiAgICAgICAgICAgICAgPG5hdiBhcmlhLWxhYmVsPSJicmVhZGNydW1iIiBjbGFzcz0iZC1pbmxpbmUtYmxvY2siPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJicmVhZGNydW1iIGJnLXdoaXRlIHJvdW5kZWQgc2hhZG93IG1iLTAiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii8iPkxhbmRyaWNrPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvaW5kZXgtc2hvcCI+U2hvcDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIGFjdGl2ZSIgYXJpYS1jdXJyZW50PSJwYWdlIj4KICAgICAgICAgICAgICAgICAgICBQcm9kdWN0cwogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L25hdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KICAgIDwvZGl2PgogICAgPCEtLWVuZCBjb250YWluZXItLT4KICA8L3NlY3Rpb24+CiAgPCEtLWVuZCBzZWN0aW9uLS0+CiAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiPgogICAgPGRpdiBjbGFzcz0ic2hhcGUgb3ZlcmZsb3ctaGlkZGVuIHRleHQtd2hpdGUiPgogICAgICA8c3ZnCiAgICAgICAgdmlld0JveD0iMCAwIDI4ODAgNDgiCiAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgID4KICAgICAgICA8cGF0aAogICAgICAgICAgZD0iTTAgNDhIMTQzNy41SDI4ODBWMEgyMTYwQzE0NDIuNSA1MiA3MjAgMCA3MjAgMEgwVjQ4WiIKICAgICAgICAgIGZpbGw9ImN1cnJlbnRDb2xvciIKICAgICAgICA+PC9wYXRoPgogICAgICA8L3N2Zz4KICAgIDwvZGl2PgogIDwvZGl2PgogIDwhLS0gSGVybyBFbmQgLS0+CgogIDwhLS0gU3RhcnQgUHJvZHVjdHMgLS0+CiAgPHNlY3Rpb24gY2xhc3M9InNlY3Rpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtNCBjb2wtMTIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBib3JkZXItMCBzaWRlYmFyIHN0aWNreS1iYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcC0wIj4KICAgICAgICAgICAgICA8IS0tIFNFQVJDSCAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3aWRnZXQiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0ic2VhcmNoMiIgY2xhc3M9IndpZGdldC1zZWFyY2ggbWItMCI+CiAgICAgICAgICAgICAgICAgIDxmb3JtCiAgICAgICAgICAgICAgICAgICAgcm9sZT0ic2VhcmNoIgogICAgICAgICAgICAgICAgICAgIG1ldGhvZD0iZ2V0IgogICAgICAgICAgICAgICAgICAgIGlkPSJzZWFyY2hmb3JtIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWFyY2hmb3JtIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYm9yZGVyIHJvdW5kZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InMiCiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJzIgogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIEtleXdvcmRzLi4uIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIGlkPSJzZWFyY2hzdWJtaXQiIHZhbHVlPSJTZWFyY2giIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS0gU0VBUkNIIC0tPgoKICAgICAgICAgICAgICA8IS0tIENhdGVnb3JpZXMgLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0IG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9IndpZGdldC10aXRsZSI+Q2F0ZWdvcmllczwvaDU+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbXQtNCBtYi0wIGJsb2ctY2F0ZWdvcmllcyI+CiAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij5NZW48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPldvbWVuPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij5FbGVjdHJvbmljczwvYT48L2xpPgogICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+SmV3ZWxsZXJ5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij5TaG9lczwvYT48L2xpPgogICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+S2lk4oCZcyBXZWFyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij5TcG9ydHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPlRveXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPkdpZnQgQ29ybmVyczwvYT48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tIENhdGVnb3JpZXMgLS0+CgogICAgICAgICAgICAgIDwhLS0gY29sb3IgLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0IG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9IndpZGdldC10aXRsZSI+Q29sb3I8L2g1PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG10LTQgbWItMCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1pY29uIGJ0bi1waWxscyBidG4tcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iZC1ub25lIj4uPC9zcGFuPjwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tc20gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1kYW5nZXIgbWwtMSIKICAgICAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iZC1ub25lIj4uPC9zcGFuPjwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tc20gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zdWNjZXNzIG1sLTEiCiAgICAgICAgICAgICAgICAgICAgICA+PHNwYW4gY2xhc3M9ImQtbm9uZSI+Ljwvc3Bhbj48L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1pY29uIGJ0bi1waWxscyBidG4taW5mbyBtbC0xIgogICAgICAgICAgICAgICAgICAgICAgPjxzcGFuIGNsYXNzPSJkLW5vbmUiPi48L3NwYW4+PC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zbSBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNlY29uZGFyeSBtbC0xIiAKICAgICAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iZC1ub25lIj4uPC9zcGFuPjwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tc20gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi13YXJuaW5nIG1sLTEiCiAgICAgICAgICAgICAgICAgICAgICA+PHNwYW4gY2xhc3M9ImQtbm9uZSI+Ljwvc3Bhbj48L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS0gQ09sb3IgLS0+CgogICAgICAgICAgICAgIDwhLS0gVG9wIFByb2R1Y3RzIC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndpZGdldCBtdC00IHB0LTIiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ3aWRnZXQtdGl0bGUiPlRvcCBQcm9kdWN0czwvaDU+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbXQtNCBtYi0wIj4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zMS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgYXZhdGFyIGF2YXRhci1zbWFsbCByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50IG1sLTMiPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1kYXJrIGg2IgogICAgICAgICAgICAgICAgICAgICAgICA+VC1TaGlydDwvYQogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXQtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICQxOC4wMCA8ZGVsIGNsYXNzPSJ0ZXh0LWRhbmdlciBtbC0yIj4kMjIuMDA8L2RlbD4KICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEgYWxpZ24taXRlbXMtY2VudGVyIG10LTIiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgYXZhdGFyIGF2YXRhci1zbWFsbCByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50IG1sLTMiPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1kYXJrIGg2IgogICAgICAgICAgICAgICAgICAgICAgICA+V2F0Y2g8L2EKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1tdXRlZCBzbWFsbCBmb250LWl0YWxpYyBtYi0wIG10LTEiPgogICAgICAgICAgICAgICAgICAgICAgICAkMTguMDAgPGRlbCBjbGFzcz0idGV4dC1kYW5nZXIgbWwtMiI+JDIyLjAwPC9kZWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIGFsaWduLWl0ZW1zLWNlbnRlciBtdC0yIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIGF2YXRhciBhdmF0YXItc21hbGwgcm91bmRlZCBzaGFkb3ciCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IGF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCBtbC0zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRleHQtZGFyayBoNiIKICAgICAgICAgICAgICAgICAgICAgICAgPkNvZmZlZSBDdXA8L2EKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1tdXRlZCBzbWFsbCBmb250LWl0YWxpYyBtYi0wIG10LTEiPgogICAgICAgICAgICAgICAgICAgICAgICAkMTguMDAgPGRlbCBjbGFzcz0idGV4dC1kYW5nZXIgbWwtMiI+JDIyLjAwPC9kZWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIGFsaWduLWl0ZW1zLWNlbnRlciBtdC0yIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczguanBnIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIGF2YXRhciBhdmF0YXItc21hbGwgcm91bmRlZCBzaGFkb3ciCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IGF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCBtbC0zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRleHQtZGFyayBoNiIKICAgICAgICAgICAgICAgICAgICAgICAgPldvb2RlbiBTdG9vbHM8L2EKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1tdXRlZCBzbWFsbCBmb250LWl0YWxpYyBtYi0wIG10LTEiPgogICAgICAgICAgICAgICAgICAgICAgICAkMTguMDAgPGRlbCBjbGFzcz0idGV4dC1kYW5nZXIgbWwtMiI+JDIyLjAwPC9kZWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wtbWQtOCBjb2wtMTIgbXQtNSBwdC0yIG10LXNtLTAgcHQtc20tMCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTciPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24tdGl0bGUiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtYi0wIj5TaG93aW5nIDHigJMxNSBvZiA0NyByZXN1bHRzPC9oNT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNSBtdC00IG10LXNtLTAgcHQtMiBwdC1zbS0wIj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1tZC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtIGN1c3RvbS1mb3JtIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGN1c3RvbS1zZWxlY3QiCiAgICAgICAgICAgICAgICAgICAgICBpZD0iU29ydGJ5bGlzdC1qb2IiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5Tb3J0IGJ5IGxhdGVzdDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5Tb3J0IGJ5IHBvcHVsYXJpdHk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+U29ydCBieSByYXRpbmc8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+U29ydCBieSBwcmljZTogbG93IHRvIGhpZ2g8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+U29ydCBieSBwcmljZTogaGlnaCB0byBsb3c8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteC0yIj4KICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvc2hvcC1ncmlkcyIgdGFnPSJhIiBjbGFzcz0iaDUgdGV4dC1tdXRlZCIKICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9InVpbCB1aWwtYXBwcyI+PC9pCiAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvc2hvcC1saXN0cyIgdGFnPSJhIiBjbGFzcz0iaDUgdGV4dC1tdXRlZCIKICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9InVpbCB1aWwtbGlzdC11bCI+PC9pCiAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tZW5kIHJvdy0tPgoKICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgc2hvcC1saXN0IGJvcmRlci0wIHNoYWRvdyBwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImxhYmVsIGxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2Utc3VjY2VzcyIKICAgICAgICAgICAgICAgICAgICAgID5GZWF0dXJlZDwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIG5vLWd1dHRlcnMiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hvcC1pbWFnZSBwb3NpdGlvbi1yZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4iPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIgogICAgICAgICAgICAgICAgICAgICAgICA+PGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zMS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIC8+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXktd29yayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHktMiBiZy1zb2Z0LWRhcmsgcm91bmRlZC1ib3R0b20gb3V0LXN0b2NrIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIHRleHQtY2VudGVyIj5PdXQgb2Ygc3RvY2s8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgY29udGVudCBwLTQiPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1kYXJrIHByb2R1Y3QtbmFtZSBoNiIKICAgICAgICAgICAgICAgICAgICAgICAgPkJyYW5kZWQgVC1TaGlydDwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDE2LjAwIDxkZWwgY2xhc3M9InRleHQtZGFuZ2VyIG1sLTIiPiQyMS4wMDwvZGVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNob3AtbGlzdCBib3JkZXItMCBzaGFkb3cgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsYWJlbCBsaXN0LXVuc3R5bGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICA+TmV3PC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXN1Y2Nlc3MiCiAgICAgICAgICAgICAgICAgICAgICA+RmVhdHVyZWQ8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2Utd2FybmluZyIKICAgICAgICAgICAgICAgICAgICAgID5TYWxlPC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbm8tZ3V0dGVycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaG9wLWltYWdlIHBvc2l0aW9uLXJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgID48aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3MyLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIiBjbGFzcz0ib3ZlcmxheS13b3JrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zLTIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgY29udGVudCBwLTQiPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1kYXJrIHByb2R1Y3QtbmFtZSBoNiIKICAgICAgICAgICAgICAgICAgICAgICAgPlNob3BwaW5nIEJhZzwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDIxLjAwIDxkZWwgY2xhc3M9InRleHQtZGFuZ2VyIG1sLTIiPiQyNS4wMDwvZGVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNob3AtbGlzdCBib3JkZXItMCBzaGFkb3cgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsYWJlbCBsaXN0LXVuc3R5bGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXdhcm5pbmciCiAgICAgICAgICAgICAgICAgICAgICA+U2FsZTwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIG5vLWd1dHRlcnMiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hvcC1pbWFnZSBwb3NpdGlvbi1yZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4iPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIgogICAgICAgICAgICAgICAgICAgICAgICA+PGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIC8+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIgY2xhc3M9Im92ZXJsYXktd29yayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3Qvcy0zLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGNvbnRlbnQgcC00Ij4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyayBwcm9kdWN0LW5hbWUgaDYiCiAgICAgICAgICAgICAgICAgICAgICAgID5FbGVnZW50IFdhdGNoPC9yb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1sZy1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtdC0yIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtbXV0ZWQgc21hbGwgZm9udC1pdGFsaWMgbWItMCBtci0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAkNS4wMCA8c3BhbiBjbGFzcz0idGV4dC1zdWNjZXNzIG1sLTEiPjMwJSBvZmY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCB0ZXh0LXdhcm5pbmcgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InBhcmEtZGVzYyB0ZXh0LW11dGVkIG1iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHJlcXVpcmVkIHdoZW4sIGZvciBleGFtcGxlLCB0aGUgZmluYWwgdGV4dCBpcwogICAgICAgICAgICAgICAgICAgICAgICBub3QgeWV0IGF2YWlsYWJsZS4gRHVtbXkgdGV4dCBpcyBhbHNvIGtub3duIGFzICdmaWxsCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQnLgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pY29uIGJ0bi1waWxscyBidG4tc29mdC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxoZWFydC1pY29uIGNsYXNzPSJpY29ucyI+PC9oZWFydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjcHJvZHVjdHZpZXciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pY29uIGJ0bi1waWxscyBidG4tc29mdC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxleWUtaWNvbiBjbGFzcz0iaWNvbnMiPjwvZXllLWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im10LTIgbGlzdC1pbmxpbmUtaXRlbSBtbC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG89Ii9zaG9wLWNhcnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pY29uIGJ0bi1waWxscyBidG4tc29mdC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxzaG9wcGluZy1jYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvc2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLWVuZCByb3ctLT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tZW5kIGJsb2cgcG9zdC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgc2hvcC1saXN0IGJvcmRlci0wIHNoYWRvdyBwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImxhYmVsIGxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2UtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgID5OZXc8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2Utc3VjY2VzcyIKICAgICAgICAgICAgICAgICAgICAgID5GZWF0dXJlZDwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmFkZ2UgYmFkZ2UtcGlsbCBiYWRnZS13YXJuaW5nIgogICAgICAgICAgICAgICAgICAgICAgPlNhbGU8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciBuby1ndXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNob3AtaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAvPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdmVybGF5LXdvcmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB5LTIgYmctc29mdC1kYXJrIHJvdW5kZWQtYm90dG9tIG91dC1zdG9jayIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCB0ZXh0LWNlbnRlciI+T3V0IG9mIHN0b2NrPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGNvbnRlbnQgcC00Ij4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyayBwcm9kdWN0LW5hbWUgaDYiCiAgICAgICAgICAgICAgICAgICAgICAgID5DYXN1YWwgU2hvZXM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWxnLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG10LTIgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1tdXRlZCBzbWFsbCBmb250LWl0YWxpYyBtYi0wIG1yLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICQxOC4wMCA8ZGVsIGNsYXNzPSJ0ZXh0LWRhbmdlciBtbC0yIj4kMjIuMDA8L2RlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHRleHQtd2FybmluZyBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFyYS1kZXNjIHRleHQtbXV0ZWQgbWItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgcmVxdWlyZWQgd2hlbiwgZm9yIGV4YW1wbGUsIHRoZSBmaW5hbCB0ZXh0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgYXZhaWxhYmxlLiBEdW1teSB0ZXh0IGlzIGFsc28ga25vd24gYXMgJ2ZpbGwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCcuCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGhlYXJ0LWljb24gY2xhc3M9Imljb25zIj48L2hlYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im10LTIgbGlzdC1pbmxpbmUtaXRlbSBtbC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNwcm9kdWN0dmlldyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGV5ZS1pY29uIGNsYXNzPSJpY29ucyI+PC9leWUtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtY2FydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PHNob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zaG9wcGluZy1jYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tZW5kIHJvdy0tPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgYmxvZyBwb3N0LS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzaG9wLWxpc3QgYm9yZGVyLTAgc2hhZG93IHBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbm8tZ3V0dGVycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaG9wLWltYWdlIHBvc2l0aW9uLXJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgID48aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3M1LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIiBjbGFzcz0ib3ZlcmxheS13b3JrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zLTUuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgY29udGVudCBwLTQiPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1kYXJrIHByb2R1Y3QtbmFtZSBoNiIKICAgICAgICAgICAgICAgICAgICAgICAgPkVhcnBob25lczwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDMuMDAKICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHRleHQtd2FybmluZyBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFyYS1kZXNjIHRleHQtbXV0ZWQgbWItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgcmVxdWlyZWQgd2hlbiwgZm9yIGV4YW1wbGUsIHRoZSBmaW5hbCB0ZXh0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgYXZhaWxhYmxlLiBEdW1teSB0ZXh0IGlzIGFsc28ga25vd24gYXMgJ2ZpbGwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCcuCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGhlYXJ0LWljb24gY2xhc3M9Imljb25zIj48L2hlYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im10LTIgbGlzdC1pbmxpbmUtaXRlbSBtbC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNwcm9kdWN0dmlldyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGV5ZS1pY29uIGNsYXNzPSJpY29ucyI+PC9leWUtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtY2FydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PHNob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zaG9wcGluZy1jYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tZW5kIHJvdy0tPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgYmxvZyBwb3N0LS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzaG9wLWxpc3QgYm9yZGVyLTAgc2hhZG93IHBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbm8tZ3V0dGVycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaG9wLWltYWdlIHBvc2l0aW9uLXJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgID48aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3M2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIiBjbGFzcz0ib3ZlcmxheS13b3JrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zLTYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgY29udGVudCBwLTQiPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1kYXJrIHByb2R1Y3QtbmFtZSBoNiIKICAgICAgICAgICAgICAgICAgICAgICAgPkVsZWdlbnQgTXVnPC9yb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1sZy1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtdC0yIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtbXV0ZWQgc21hbGwgZm9udC1pdGFsaWMgbWItMCBtci0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAkNC41MCA8ZGVsIGNsYXNzPSJ0ZXh0LWRhbmdlciBtbC0yIj4kNi41MDwvZGVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNob3AtbGlzdCBib3JkZXItMCBzaGFkb3cgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciBuby1ndXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNob3AtaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczcuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAvPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdmVybGF5LXdvcmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB5LTIgYmctc29mdC1kYXJrIHJvdW5kZWQtYm90dG9tIG91dC1zdG9jayIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCB0ZXh0LWNlbnRlciI+T3V0IG9mIHN0b2NrPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGNvbnRlbnQgcC00Ij4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyayBwcm9kdWN0LW5hbWUgaDYiCiAgICAgICAgICAgICAgICAgICAgICAgID5Tb255IEhlYWRwaG9uZXM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWxnLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG10LTIgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1tdXRlZCBzbWFsbCBmb250LWl0YWxpYyBtYi0wIG1yLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICQ5Ljk5IDxzcGFuIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MgbWwtMiI+MjAlIG9mZjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHRleHQtd2FybmluZyBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFyYS1kZXNjIHRleHQtbXV0ZWQgbWItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgcmVxdWlyZWQgd2hlbiwgZm9yIGV4YW1wbGUsIHRoZSBmaW5hbCB0ZXh0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgYXZhaWxhYmxlLiBEdW1teSB0ZXh0IGlzIGFsc28ga25vd24gYXMgJ2ZpbGwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCcuCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGhlYXJ0LWljb24gY2xhc3M9Imljb25zIj48L2hlYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im10LTIgbGlzdC1pbmxpbmUtaXRlbSBtbC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNwcm9kdWN0dmlldyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGV5ZS1pY29uIGNsYXNzPSJpY29ucyI+PC9leWUtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtY2FydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PHNob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zaG9wcGluZy1jYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tZW5kIHJvdy0tPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgYmxvZyBwb3N0LS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzaG9wLWxpc3QgYm9yZGVyLTAgc2hhZG93IHBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGFiZWwgbGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmFkZ2UgYmFkZ2UtcGlsbCBiYWRnZS13YXJuaW5nIgogICAgICAgICAgICAgICAgICAgICAgPlNhbGU8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciBuby1ndXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNob3AtaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczguanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAvPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiIGNsYXNzPSJvdmVybGF5LXdvcmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3MtOC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBjb250ZW50IHAtNCI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIgogICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmsgcHJvZHVjdC1uYW1lIGg2IgogICAgICAgICAgICAgICAgICAgICAgICA+V29vZGVuIFN0b29sczwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDIyLjAwIDxkZWwgY2xhc3M9InRleHQtZGFuZ2VyIG1sLTIiPiQyNS4wMDwvZGVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNob3AtbGlzdCBib3JkZXItMCBzaGFkb3cgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciBuby1ndXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNob3AtaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczkuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAvPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiIGNsYXNzPSJvdmVybGF5LXdvcmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3MtOS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBjb250ZW50IHAtNCI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIgogICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmsgcHJvZHVjdC1uYW1lIGg2IgogICAgICAgICAgICAgICAgICAgICAgICA+Q29mZmVlIEN1cCAvIE11Zzwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDE2LjAwIDxkZWwgY2xhc3M9InRleHQtZGFuZ2VyIG1sLTIiPiQyMS4wMDwvZGVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNob3AtbGlzdCBib3JkZXItMCBzaGFkb3cgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsYWJlbCBsaXN0LXVuc3R5bGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICA+TmV3PC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbm8tZ3V0dGVycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaG9wLWltYWdlIHBvc2l0aW9uLXJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgID48aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3MxMC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIC8+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIgY2xhc3M9Im92ZXJsYXktd29yayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3Qvcy0xMC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBjb250ZW50IHAtNCI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIgogICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmsgcHJvZHVjdC1uYW1lIGg2IgogICAgICAgICAgICAgICAgICAgICAgICA+U3VuZ2xhc3Nlczwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDIxLjAwIDxkZWwgY2xhc3M9InRleHQtZGFuZ2VyIG1sLTIiPiQyNS4wMDwvZGVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNob3AtbGlzdCBib3JkZXItMCBzaGFkb3cgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciBuby1ndXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNob3AtaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczExLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIiBjbGFzcz0ib3ZlcmxheS13b3JrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zLTExLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGNvbnRlbnQgcC00Ij4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyayBwcm9kdWN0LW5hbWUgaDYiCiAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FmZXIgU2hvZXM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWxnLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG10LTIgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1tdXRlZCBzbWFsbCBmb250LWl0YWxpYyBtYi0wIG1yLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICQ1LjAwIDxzcGFuIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MgbWwtMSI+MzAlIG9mZjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHRleHQtd2FybmluZyBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFyYS1kZXNjIHRleHQtbXV0ZWQgbWItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgcmVxdWlyZWQgd2hlbiwgZm9yIGV4YW1wbGUsIHRoZSBmaW5hbCB0ZXh0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgYXZhaWxhYmxlLiBEdW1teSB0ZXh0IGlzIGFsc28ga25vd24gYXMgJ2ZpbGwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCcuCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGhlYXJ0LWljb24gY2xhc3M9Imljb25zIj48L2hlYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im10LTIgbGlzdC1pbmxpbmUtaXRlbSBtbC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNwcm9kdWN0dmlldyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGV5ZS1pY29uIGNsYXNzPSJpY29ucyI+PC9leWUtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtY2FydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PHNob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zaG9wcGluZy1jYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tZW5kIHJvdy0tPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgYmxvZyBwb3N0LS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzaG9wLWxpc3QgYm9yZGVyLTAgc2hhZG93IHBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbm8tZ3V0dGVycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaG9wLWltYWdlIHBvc2l0aW9uLXJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgID48aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3MxMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIC8+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIgY2xhc3M9Im92ZXJsYXktd29yayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3Qvcy0xMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBjb250ZW50IHAtNCI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIgogICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmsgcHJvZHVjdC1uYW1lIGg2IgogICAgICAgICAgICAgICAgICAgICAgICA+VC1TaGlydHM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWxnLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG10LTIgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1tdXRlZCBzbWFsbCBmb250LWl0YWxpYyBtYi0wIG1yLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICQxOC4wMCA8ZGVsIGNsYXNzPSJ0ZXh0LWRhbmdlciBtbC0yIj4kMjIuMDA8L2RlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHRleHQtd2FybmluZyBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFyYS1kZXNjIHRleHQtbXV0ZWQgbWItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgcmVxdWlyZWQgd2hlbiwgZm9yIGV4YW1wbGUsIHRoZSBmaW5hbCB0ZXh0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCB5ZXQgYXZhaWxhYmxlLiBEdW1teSB0ZXh0IGlzIGFsc28ga25vd24gYXMgJ2ZpbGwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCcuCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGhlYXJ0LWljb24gY2xhc3M9Imljb25zIj48L2hlYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im10LTIgbGlzdC1pbmxpbmUtaXRlbSBtbC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNwcm9kdWN0dmlldyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGV5ZS1pY29uIGNsYXNzPSJpY29ucyI+PC9leWUtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtY2FydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXBpbGxzIGJ0bi1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PHNob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zaG9wcGluZy1jYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tZW5kIHJvdy0tPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgYmxvZyBwb3N0LS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzaG9wLWxpc3QgYm9yZGVyLTAgc2hhZG93IHBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbm8tZ3V0dGVycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaG9wLWltYWdlIHBvc2l0aW9uLXJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIiB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgID48aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvc2hvcC9wcm9kdWN0L3MxMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIC8+PC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIgY2xhc3M9Im92ZXJsYXktd29yayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3Qvcy0xMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBjb250ZW50IHAtNCI+CiAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIgogICAgICAgICAgICAgICAgICAgICAgICB0bz0iL3Nob3AtcHJvZHVjdC1kZXRhaWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmsgcHJvZHVjdC1uYW1lIGg2IgogICAgICAgICAgICAgICAgICAgICAgICA+V29vZGVuIENoYWlyPC9yb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1sZy1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtdC0yIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtbXV0ZWQgc21hbGwgZm9udC1pdGFsaWMgbWItMCBtci0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAkMTYuMDAgPGRlbCBjbGFzcz0idGV4dC1kYW5nZXIgbWwtMiI+JDIxLjAwPC9kZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCB0ZXh0LXdhcm5pbmcgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InBhcmEtZGVzYyB0ZXh0LW11dGVkIG1iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHJlcXVpcmVkIHdoZW4sIGZvciBleGFtcGxlLCB0aGUgZmluYWwgdGV4dCBpcwogICAgICAgICAgICAgICAgICAgICAgICBub3QgeWV0IGF2YWlsYWJsZS4gRHVtbXkgdGV4dCBpcyBhbHNvIGtub3duIGFzICdmaWxsCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQnLgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pY29uIGJ0bi1waWxscyBidG4tc29mdC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxoZWFydC1pY29uIGNsYXNzPSJpY29ucyI+PC9oZWFydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjcHJvZHVjdHZpZXciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pY29uIGJ0bi1waWxscyBidG4tc29mdC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxleWUtaWNvbiBjbGFzcz0iaWNvbnMiPjwvZXllLWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im10LTIgbGlzdC1pbmxpbmUtaXRlbSBtbC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdGFnPSJhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG89Ii9zaG9wLWNhcnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pY29uIGJ0bi1waWxscyBidG4tc29mdC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxzaG9wcGluZy1jYXJ0LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvc2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLWVuZCByb3ctLT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tZW5kIGJsb2cgcG9zdC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgc2hvcC1saXN0IGJvcmRlci0wIHNoYWRvdyBwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImxhYmVsIGxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2UtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgID5OZXc8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2Utc3VjY2VzcyIKICAgICAgICAgICAgICAgICAgICAgID5GZWF0dXJlZDwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmFkZ2UgYmFkZ2UtcGlsbCBiYWRnZS13YXJuaW5nIgogICAgICAgICAgICAgICAgICAgICAgPlNhbGU8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciBuby1ndXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNob3AtaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczE0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIiBjbGFzcz0ib3ZlcmxheS13b3JrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zLTE0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGNvbnRlbnQgcC00Ij4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyayBwcm9kdWN0LW5hbWUgaDYiCiAgICAgICAgICAgICAgICAgICAgICAgID5Xb21lbiBCbG9jayBIZWVsczwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDIxLjAwIDxkZWwgY2xhc3M9InRleHQtZGFuZ2VyIG1sLTIiPiQyNS4wMDwvZGVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHNob3AtbGlzdCBib3JkZXItMCBzaGFkb3cgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciBuby1ndXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNob3AtaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9zaG9wL3Byb2R1Y3QvczE1LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgLz48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIgdG89Ii9zaG9wLXByb2R1Y3QtZGV0YWlsIiBjbGFzcz0ib3ZlcmxheS13b3JrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL3Nob3AvcHJvZHVjdC9zLTE1LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGNvbnRlbnQgcC00Ij4KICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0YWc9ImEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1wcm9kdWN0LWRldGFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyayBwcm9kdWN0LW5hbWUgaDYiCiAgICAgICAgICAgICAgICAgICAgICAgID5ULVNoaXJ0czwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LW11dGVkIHNtYWxsIGZvbnQtaXRhbGljIG1iLTAgbXItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJDUuMDAgPHNwYW4gY2xhc3M9InRleHQtc3VjY2VzcyBtbC0xIj4zMCUgb2ZmPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC13YXJuaW5nIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhLWRlc2MgdGV4dC1tdXRlZCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Jy4KICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aGVhcnQtaWNvbiBjbGFzcz0iaWNvbnMiPjwvaGVhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibXQtMiBsaXN0LWlubGluZS1pdGVtIG1sLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48ZXllLWljb24gY2xhc3M9Imljb25zIj48L2V5ZS1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtdC0yIGxpc3QtaW5saW5lLWl0ZW0gbWwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRhZz0iYSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPSIvc2hvcC1jYXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcGlsbHMgYnRuLXNvZnQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48c2hvcHBpbmctY2FydC1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3Nob3BwaW5nLWNhcnQtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBibG9nIHBvc3QtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8IS0tIFBBR0lOQVRJT04gU1RBUlQgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0icGFnaW5hdGlvbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIG1iLTAiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwYWdlLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9IlByZXZpb3VzIgogICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0ibWRpIG1kaS1hcnJvdy1sZWZ0Ij48L2k+IFByZXY8L2EKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIGFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwYWdlLWxpbmsiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+MTwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwYWdlLWxpbmsiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+MjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwYWdlLWxpbmsiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+MzwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iTmV4dCIKICAgICAgICAgICAgICAgICAgICA+TmV4dCA8aSBjbGFzcz0ibWRpIG1kaS1hcnJvdy1yaWdodCI+PC9pCiAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgICAgICA8IS0tIFBBR0lOQVRJT04gRU5EIC0tPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tZW5kIHJvdy0tPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8IS0tIEVuZCBQcm9kdWN0cyAtLT4KCiAgPEZvb3RlciAvPgogIDwhLS0gRm9vdGVyIEVuZCAtLT4KICA8U3dpdGNoZXIgLz4KICA8IS0tIEJhY2sgdG8gdG9wIC0tPgogIDxhCiAgICBocmVmPSJqYXZhc2NyaXB0OiB2b2lkKDApOyIKICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXByaW1hcnkgYmFjay10by10b3AiCiAgICBpZD0iYmFjay10by10b3AiCiAgICB2LXNjcm9sbC10bz0iJyN0b3BuYXYnIgogID4KICAgIDxhcnJvdy11cC1pY29uIGNsYXNzPSJpY29ucyI+PC9hcnJvdy11cC1pY29uPgogIDwvYT4KICA8IS0tIEJhY2sgdG8gdG9wIC0tPgo8L2Rpdj4K"},null]}