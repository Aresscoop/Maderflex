{"remainingRequest":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/manu/Documents/GitHub/Maderflex/src/views/index-hospital.vue?vue&type=template&id=62a44d18&","dependencies":[{"path":"/Users/manu/Documents/GitHub/Maderflex/src/views/index-hospital.vue","mtime":1612627230000},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/babel-loader/lib/index.js","mtime":1687166098388},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687166106161},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js","mtime":1687166106161}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPE5hdmJhciAvPgoKICA8IS0tIEhlcm8gU3RhcnQgLS0+CiAgPHNlY3Rpb24gY2xhc3M9ImJnLWhhbGYtMTcwIGQtdGFibGUgdy0xMDAgaG9tZS13cmFwcGVyIG92ZXJmbG93LWhpZGRlbiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQtNSBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC02Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLWhlYWRpbmciPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2UgYmFkZ2UtcGlsbCBiYWRnZS1zb2Z0LXByaW1hcnkiCiAgICAgICAgICAgICAgPjxiPk1lZGljYWw8L2I+PC9zcGFuCiAgICAgICAgICAgID4KICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkaW5nIG15LTMiPgogICAgICAgICAgICAgIFdlIFRha2UgQ2FyZSA8YnIgLz4KICAgICAgICAgICAgICBvZiBZb3VyIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkiPkhlYWx0aDwvc3Bhbj4KICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPHAgY2xhc3M9InBhcmEtZGVzYyB0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgIExhdW5jaCB5b3VyIGNhbXBhaWduIGFuZCBiZW5lZml0IGZyb20gb3VyIGV4cGVydGlzZSBvbiBkZXNpZ25pbmcKICAgICAgICAgICAgICBhbmQgbWFuYWdpbmcgY29udmVyc2lvbiBjZW50ZXJlZCBib290c3RyYXA0IGh0bWwgcGFnZS4KICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMyI+CiAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG1yLTIgbXQtMiIKICAgICAgICAgICAgICAgID5GaW5kIERvY3RvcnM8L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iYnRuIGJ0bi1zb2Z0LXByaW1hcnkgbXQtMiIKICAgICAgICAgICAgICAgID5Cb29rIGFuIEFwcG9pbnRtZW50PC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAgbXQtMyI+CiAgICAgICAgICAgICAgRG9uJ3QgaGF2ZSBhbiBhY2NvdW50IHlldD8KICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJ0ZXh0LXByaW1hcnkgbWwtMiBoNiBtYi0wIgogICAgICAgICAgICAgICAgPlNpZ251cCAgPGFycm93LXJpZ2h0LWljb24gY2xhc3M9ImZlYSBpY29uLXNtIj48L2Fycm93LXJpZ2h0LWljb24+PC9hPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLW1kLTYgbXQtNCBwdC0yIG10LXNtLTAgcHQtc20tMCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC1sZy00Ij4KICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL2lsbHVzdHJhdG9yL2RvY3RvcnMtY3VhdGUuc3ZnIgogICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KICAgIDwvZGl2PgogICAgPCEtLWVuZCBjb250YWluZXItLT4KICA8L3NlY3Rpb24+CiAgPCEtLWVuZCBzZWN0aW9uLS0+CiAgPCEtLSBIZXJvIEVuZCAtLT4KCiAgPCEtLSBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbiBiZy1saWdodCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC02IGNvbC0xMiI+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSJjYXJkIGZlYXR1cmVzIGZlYS1wcmltYXJ5IHJvdW5kZWQgcC00IGJnLXdoaXRlIHBvc2l0aW9uLXJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiBib3JkZXItMCIKICAgICAgICAgID4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImgxIGljb24yIHRleHQtcHJpbWFyeSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9InVpbCB1aWwtbmV3c3BhcGVyIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHAtMCBjb250ZW50Ij4KICAgICAgICAgICAgICA8aDU+QXBwb2ludG1lbnQ8L2g1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhIHRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICBJdCBpcyBhIGxvbmcgZXN0YWJsaXNoZWQgZmFjdCB0aGF0IGEgcmVhZGVyIGxheW91dC4KICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1waWxscyBidG4tc29mdC1zdWNjZXNzIG10LTQiCiAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Byb2R1Y3R2aWV3IgogICAgICAgICAgICAgICAgPlJlcXVlc3Q8L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTYgY29sLTEyIG10LTQgcHQtMiBtdC1zbS0wIHB0LXNtLTAiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iY2FyZCBmZWF0dXJlcyBmZWEtcHJpbWFyeSByb3VuZGVkIHAtNCBiZy13aGl0ZSBwb3NpdGlvbi1yZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gYm9yZGVyLTAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoMSBpY29uMiB0ZXh0LXByaW1hcnkiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJ1aWwgdWlsLWNsb2NrIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHAtMCBjb250ZW50Ij4KICAgICAgICAgICAgICA8aDU+T3BlbmluZyBIb3VyPC9oNT4KCiAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIj5Nb25kYXkgLSBGcmlkYXk8L2g2PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJwYXJhIHRleHQtbXV0ZWQiPjdBTSB0byAxMSBQTTwvcD4KCiAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIj5BZGRyZXNzOjwvaDY+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InBhcmEgdGV4dC1tdXRlZCBtYi0wIj5DLzU0IE5vcnRod2VzdCBGcmVld2F5PC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC02IGNvbC0xMiBtdC00IG10LWxnLTAgcHQtMiBwdC1sZy0wIj4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9ImNhcmQgZmVhdHVyZXMgZmVhLXByaW1hcnkgcm91bmRlZCBwLTQgYmctd2hpdGUgcG9zaXRpb24tcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIGJvcmRlci0wIgogICAgICAgICAgPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaDEgaWNvbjIgdGV4dC1wcmltYXJ5Ij4KICAgICAgICAgICAgICA8aSBjbGFzcz0idWlsIHVpbC11c2VyLW1kIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHAtMCBjb250ZW50Ij4KICAgICAgICAgICAgICA8aDU+RmluZCBEb2N0b3JzPC9oNT4KICAgICAgICAgICAgICA8cCBjbGFzcz0icGFyYSB0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgSXQgaXMgYSBsb25nIGVzdGFibGlzaGVkIGZhY3QgdGhhdCBhIHJlYWRlciBsYXlvdXQuCiAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcGlsbHMgYnRuLXNvZnQtc3VjY2VzcyBtdC00IgogICAgICAgICAgICAgICAgPkRvY3RvcnM8L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTYgY29sLTEyIG10LTQgbXQtbGctMCBwdC0yIHB0LWxnLTAiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iY2FyZCBmZWF0dXJlcyBmZWEtcHJpbWFyeSByb3VuZGVkIHAtNCBiZy13aGl0ZSBwb3NpdGlvbi1yZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gYm9yZGVyLTAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoMSBpY29uMiB0ZXh0LXByaW1hcnkiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJ1aWwgdWlsLW1hcC1tYXJrZXIiPjwvaT4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcC0wIGNvbnRlbnQiPgogICAgICAgICAgICAgIDxoNT5GaW5kIExvY2F0aW9uczwvaDU+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InBhcmEgdGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgIEl0IGlzIGEgbG9uZyBlc3RhYmxpc2hlZCBmYWN0IHRoYXQgYSByZWFkZXIgbGF5b3V0LgogICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXBpbGxzIGJ0bi1zb2Z0LXN1Y2Nlc3MgbXQtNCIKICAgICAgICAgICAgICAgID5Mb2NhdGlvbnM8L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgPC9kaXY+CiAgICAgIDwhLS1lbmQgcm93LS0+CiAgICA8L2Rpdj4KICAgIDwhLS1lbmQgY29udGFpbmVyLS0+CiAgPC9zZWN0aW9uPgogIDwhLS1lbmQgc2VjdGlvbi0tPgogIDwhLS0gRW5kIC0tPgoKICA8IS0tIFN0YXJ0IC0tPgogIDxzZWN0aW9uIGNsYXNzPSJzZWN0aW9uIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy01IGNvbC1tZC02Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL21lZGljYWwvYWJvdXQuanBnIgogICAgICAgICAgICAgIGNsYXNzPSJyb3VuZGVkIGltZy1mbHVpZCBteC1hdXRvIGQtYmxvY2sgc2hhZG93IHJvdW5kZWQiCiAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsYXktaWNvbiI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6IHZvaWQoMCk7IgogICAgICAgICAgICAgICAgdi1iLW1vZGFsLm1vZGFsLTEKICAgICAgICAgICAgICAgIGNsYXNzPSJwbGF5LWJ0biB2aWRlby1wbGF5LWljb24iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kaSBtZGktcGxheSB0ZXh0LXByaW1hcnkgcm91bmRlZC1jaXJjbGUgYmctd2hpdGUgc2hhZG93IgogICAgICAgICAgICAgICAgPjwvaT4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgIDxiLW1vZGFsCiAgICAgICAgICAgICAgaWQ9Im1vZGFsLTEiCiAgICAgICAgICAgICAgaGlkZS1mb290ZXIKICAgICAgICAgICAgICBzaXplPSJsZyIKICAgICAgICAgICAgICBoZWFkZXItY2xvc2UtdmFyaWFudD0id2hpdGUiCiAgICAgICAgICAgICAgaGVhZGVyLWNsYXNzPSJib3JkZXItMCIKICAgICAgICAgICAgICBjb250ZW50LWNsYXNzPSJib3JkZXItMCIKICAgICAgICAgICAgICBjZW50ZXJlZAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHZpbWVvLXBsYXllcgogICAgICAgICAgICAgICAgcmVmPSJwbGF5ZXIiCiAgICAgICAgICAgICAgICA6cGxheWVyLXdpZHRoPSI3NTAiCiAgICAgICAgICAgICAgICA6cGxheWVyLWhlaWdodD0iNDUwIgogICAgICAgICAgICAgICAgOnZpZGVvLWlkPSIyODc2ODQyMjUiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9iLW1vZGFsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy03IGNvbC1tZC02IG10LTQgbXQtc20tMCBwdC0yIHB0LXNtLTAiPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSBtbC1sZy01Ij4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2Utc29mdC1wcmltYXJ5Ij5BYm91dCB1czwvc3Bhbj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtdC0zIG1iLTQiPkEgZ3JlYXQgcGxhY2UgdG8gcmVjZWl2ZSBjYXJlPC9oND4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgcGFyYS1kZXNjIj4KICAgICAgICAgICAgICBJZiB0aGUgZGlzdHJpYnV0aW9uIG9mIGxldHRlcnMgYW5kICd3b3JkcycgaXMgcmFuZG9tLCB0aGUgcmVhZGVyCiAgICAgICAgICAgICAgd2lsbCBub3QgYmUgZGlzdHJhY3RlZCBmcm9tIG1ha2luZyBhIG5ldXRyYWwganVkZ2VtZW50IG9uIHRoZQogICAgICAgICAgICAgIHZpc3VhbCBpbXBhY3QgYW5kIHJlYWRhYmlsaXR5IG9mIHRoZSB0eXBlZmFjZXMgKHR5cG9ncmFwaHkpLCBvcgogICAgICAgICAgICAgIHRoZSBkaXN0cmlidXRpb24gb2YgdGV4dCBvbiB0aGUgcGFnZSAobGF5b3V0IG9yIHR5cGUgYXJlYSkuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgcGFyYS1kZXNjIG1iLTAiPgogICAgICAgICAgICAgIEZvciB0aGlzIHJlYXNvbiwgZHVtbXkgdGV4dCB1c3VhbGx5IGNvbnNpc3RzIG9mIGEgbW9yZSBvciBsZXNzCiAgICAgICAgICAgICAgcmFuZG9tIHNlcmllcyBvZiB3b3JkcyBvciBzeWxsYWJsZXMuCiAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTQiPgogICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIKICAgICAgICAgICAgICAgID5Nb3JlIFNlcnZpY2VzPC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBtdC0xMDAgbXQtNjAiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtZW5kIG1iLTQgcGItMiI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSB0ZXh0LWNlbnRlciB0ZXh0LW1kLWxlZnQiPgogICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtcHJpbWFyeSI+U2VydmljZXM8L2g2PgogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTQiPk91ciBNZWRpY2FsIFNlcnZpY2VzPC9oND4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgbWItMCBwYXJhLWRlc2MiPgogICAgICAgICAgICAgIFN0YXJ0IHdvcmtpbmcgd2l0aAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCI+TGFuZHJpY2s8L3NwYW4+IHRoYXQKICAgICAgICAgICAgICBjYW4gcHJvdmlkZSBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGdlbmVyYXRlIGF3YXJlbmVzcywgZHJpdmUKICAgICAgICAgICAgICB0cmFmZmljLCBjb25uZWN0LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtdC00IG10LXNtLTAgZC1ub25lIGQtbWQtYmxvY2siPgogICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1tZC1yaWdodCI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRleHQtcHJpbWFyeSBoNiIKICAgICAgICAgICAgICA+U2VlIE1vcmUgIDxhcnJvdy1yaWdodC1pY29uIGNsYXNzPSJmZWEgaWNvbi1zbSI+PC9hcnJvdy1yaWdodC1pY29uPjwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgoKICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtdC00IHB0LTIiPgogICAgICAgICAgPHVsCiAgICAgICAgICAgIGNsYXNzPSJuYXYgbmF2LXBpbGxzIG5hdi1qdXN0aWZpZWQgZmxleC1jb2x1bW4gYmctd2hpdGUgcm91bmRlZCBzaGFkb3cgcC0zIG1iLTAgc3RpY2t5LWJhciIKICAgICAgICAgICAgaWQ9InBpbGxzLXRhYiIKICAgICAgICAgICAgcm9sZT0idGFibGlzdCIKICAgICAgICAgID4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayByb3VuZGVkIGFjdGl2ZSIKICAgICAgICAgICAgICAgIGlkPSJkZW50YWxjYXJlIgogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9InBpbGwiCiAgICAgICAgICAgICAgICBocmVmPSIjZGVudGFsIgogICAgICAgICAgICAgICAgcm9sZT0idGFiIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iZGVudGFsIgogICAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD0iZmFsc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgcHktMSI+CiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCI+RGVudGFsIFNlcnZpY2U8L2g2PgogICAgICAgICAgICAgICAgPC9kaXY+IDwvYQogICAgICAgICAgICAgID48IS0tZW5kIG5hdiBsaW5rLS0+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwhLS1lbmQgbmF2IGl0ZW0tLT4KCiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gbXQtMiI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayByb3VuZGVkIgogICAgICAgICAgICAgICAgaWQ9ImNhcmRlb2dyYXBoeSIKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJwaWxsIgogICAgICAgICAgICAgICAgaHJlZj0iI2NhcmRlbyIKICAgICAgICAgICAgICAgIHJvbGU9InRhYiIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNhcmRlbyIKICAgICAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9ImZhbHNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIHB5LTEiPgogICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTAiPkNhcmRpb2dyYXBoeSBTZXJ2aWNlPC9oNj4KICAgICAgICAgICAgICAgIDwvZGl2PiA8L2EKICAgICAgICAgICAgICA+PCEtLWVuZCBuYXYgbGluay0tPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8IS0tZW5kIG5hdiBpdGVtLS0+CgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIG10LTIiPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsgcm91bmRlZCIKICAgICAgICAgICAgICAgIGlkPSJleWVjYXJlIgogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9InBpbGwiCiAgICAgICAgICAgICAgICBocmVmPSIjZXllIgogICAgICAgICAgICAgICAgcm9sZT0idGFiIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iZXllIgogICAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD0iZmFsc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgcHktMSI+CiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCI+RXllIENhcmUgU2VydmljZTwvaDY+CiAgICAgICAgICAgICAgICA8L2Rpdj4gPC9hCiAgICAgICAgICAgICAgPjwhLS1lbmQgbmF2IGxpbmstLT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPCEtLWVuZCBuYXYgaXRlbS0tPgoKICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBtdC0yIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIHJvdW5kZWQiCiAgICAgICAgICAgICAgICBpZD0iZ2VuZXJhbC1zZXJ2ZSIKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJwaWxsIgogICAgICAgICAgICAgICAgaHJlZj0iI2dlbmVyYWwiCiAgICAgICAgICAgICAgICByb2xlPSJ0YWIiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJnZW5lcmFsIgogICAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD0iZmFsc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgcHktMSI+CiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCI+R2VuZXJhbCBDaGVja3VwPC9oNj4KICAgICAgICAgICAgICAgIDwvZGl2PiA8L2EKICAgICAgICAgICAgICA+PCEtLWVuZCBuYXYgbGluay0tPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8IS0tZW5kIG5hdiBpdGVtLS0+CgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIG10LTIiPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsgcm91bmRlZCIKICAgICAgICAgICAgICAgIGlkPSJtZWRpY2luZSIKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJwaWxsIgogICAgICAgICAgICAgICAgaHJlZj0iI21lZGljYWwiCiAgICAgICAgICAgICAgICByb2xlPSJ0YWIiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJtZWRpY2FsIgogICAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD0iZmFsc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgcHktMSI+CiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCI+TWVkaWNpbmUgU2VydmljZTwvaDY+CiAgICAgICAgICAgICAgICA8L2Rpdj4gPC9hCiAgICAgICAgICAgICAgPjwhLS1lbmQgbmF2IGxpbmstLT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPCEtLWVuZCBuYXYgaXRlbS0tPgoKICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBtdC0yIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIHJvdW5kZWQiCiAgICAgICAgICAgICAgICBpZD0ib3J0aG9wYWRpYyIKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJwaWxsIgogICAgICAgICAgICAgICAgaHJlZj0iI29ydGhvIgogICAgICAgICAgICAgICAgcm9sZT0idGFiIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0ib3J0aG8iCiAgICAgICAgICAgICAgICBhcmlhLXNlbGVjdGVkPSJmYWxzZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciBweS0xIj4KICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIj5PcnRob3BhZGljPC9oNj4KICAgICAgICAgICAgICAgIDwvZGl2PiA8L2EKICAgICAgICAgICAgICA+PCEtLWVuZCBuYXYgbGluay0tPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8IS0tZW5kIG5hdiBpdGVtLS0+CiAgICAgICAgICA8L3VsPgogICAgICAgICAgPCEtLWVuZCBuYXYgcGlsbHMtLT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCBjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1jb250ZW50IiBpZD0icGlsbHMtdGFiQ29udGVudCI+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBjbGFzcz0idGFiLXBhbmUgZmFkZSBiZy13aGl0ZSBzaG93IGFjdGl2ZSBwLTQgcm91bmRlZCBzaGFkb3ciCiAgICAgICAgICAgICAgaWQ9ImRlbnRhbCIKICAgICAgICAgICAgICByb2xlPSJ0YWJwYW5lbCIKICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9ImRlbnRhbGNhcmUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9tZWRpY2FsL2RlbnRhbC5qcGciCiAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00Ij4KICAgICAgICAgICAgICAgIDxoNT5EZW50YWwgU2VydmljZTwvaDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBteS0zIj4KICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMgbm90CiAgICAgICAgICAgICAgICAgIHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbCB0ZXh0Jy4gSXQKICAgICAgICAgICAgICAgICAgaXMgc2FpZCB0aGF0IHNvbmcgY29tcG9zZXJzIG9mIHRoZSBwYXN0IHVzZWQgZHVtbXkgdGV4dHMgYXMKICAgICAgICAgICAgICAgICAgbHlyaWNzLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICA+TGVhcm4gTW9yZQogICAgICAgICAgICAgICAgICA8YXJyb3ctcmlnaHQtaWNvbiBjbGFzcz0iZmVhIGljb24tc20iPjwvYXJyb3ctcmlnaHQtaWNvbj48L2E+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIHRlYiBwYW5lLS0+CgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InRhYi1wYW5lIGZhZGUgYmctd2hpdGUgcC00IHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgIGlkPSJjYXJkZW8iCiAgICAgICAgICAgICAgcm9sZT0idGFicGFuZWwiCiAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJjYXJkZW9ncmFwaHkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9tZWRpY2FsL2NhcmRpby5qcGciCiAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00Ij4KICAgICAgICAgICAgICAgIDxoNT5DYXJkaW9ncmFwaHkgU2VydmljZTwvaDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBteS0zIj4KICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMgbm90CiAgICAgICAgICAgICAgICAgIHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbCB0ZXh0Jy4gSXQKICAgICAgICAgICAgICAgICAgaXMgc2FpZCB0aGF0IHNvbmcgY29tcG9zZXJzIG9mIHRoZSBwYXN0IHVzZWQgZHVtbXkgdGV4dHMgYXMKICAgICAgICAgICAgICAgICAgbHlyaWNzLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICA+TGVhcm4gTW9yZQogICAgICAgICAgICAgICAgICAgPGFycm93LXJpZ2h0LWljb24gY2xhc3M9ImZlYSBpY29uLXNtIj48L2Fycm93LXJpZ2h0LWljb24+PC9hPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLWVuZCB0ZWIgcGFuZS0tPgoKICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJ0YWItcGFuZSBmYWRlIGJnLXdoaXRlIHAtNCByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICBpZD0iZXllIgogICAgICAgICAgICAgIHJvbGU9InRhYnBhbmVsIgogICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT0iZXllY2FyZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL21lZGljYWwvZXllY2FyZS5qcGciCiAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00Ij4KICAgICAgICAgICAgICAgIDxoNT5FeWUgQ2FyZTwvaDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBteS0zIj4KICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMgbm90CiAgICAgICAgICAgICAgICAgIHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbCB0ZXh0Jy4gSXQKICAgICAgICAgICAgICAgICAgaXMgc2FpZCB0aGF0IHNvbmcgY29tcG9zZXJzIG9mIHRoZSBwYXN0IHVzZWQgZHVtbXkgdGV4dHMgYXMKICAgICAgICAgICAgICAgICAgbHlyaWNzLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICA+TGVhcm4gTW9yZQogICAgICAgICAgICAgICAgICAgPGFycm93LXJpZ2h0LWljb24gY2xhc3M9ImZlYSBpY29uLXNtIj48L2Fycm93LXJpZ2h0LWljb24+PC9hPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLWVuZCB0ZWIgcGFuZS0tPgoKICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJ0YWItcGFuZSBmYWRlIGJnLXdoaXRlIHAtNCByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICBpZD0iZ2VuZXJhbCIKICAgICAgICAgICAgICByb2xlPSJ0YWJwYW5lbCIKICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9ImdlbmVyYWwtc2VydmUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9tZWRpY2FsL2dlbmVyYWwuanBnIgogICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNCI+CiAgICAgICAgICAgICAgICA8aDU+R2VuZXJhbCBCb2R5IENoZWNrdXA8L2g1PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgbXktMyI+CiAgICAgICAgICAgICAgICAgIFRoaXMgaXMgcmVxdWlyZWQgd2hlbiwgZm9yIGV4YW1wbGUsIHRoZSBmaW5hbCB0ZXh0IGlzIG5vdAogICAgICAgICAgICAgICAgICB5ZXQgYXZhaWxhYmxlLiBEdW1teSB0ZXh0IGlzIGFsc28ga25vd24gYXMgJ2ZpbGwgdGV4dCcuIEl0CiAgICAgICAgICAgICAgICAgIGlzIHNhaWQgdGhhdCBzb25nIGNvbXBvc2VycyBvZiB0aGUgcGFzdCB1c2VkIGR1bW15IHRleHRzIGFzCiAgICAgICAgICAgICAgICAgIGx5cmljcy4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRleHQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgPkxlYXJuIE1vcmUKICAgICAgICAgICAgICAgICAgPGFycm93LXJpZ2h0LWljb24gY2xhc3M9ImZlYSBpY29uLXNtIj48L2Fycm93LXJpZ2h0LWljb24+PC9hPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLWVuZCB0ZWIgcGFuZS0tPgoKICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJ0YWItcGFuZSBmYWRlIGJnLXdoaXRlIHAtNCByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICBpZD0ibWVkaWNhbCIKICAgICAgICAgICAgICByb2xlPSJ0YWJwYW5lbCIKICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9Im1lZGljaW5lIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvbWVkaWNhbC9tZWRpY2luZS5qcGciCiAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00Ij4KICAgICAgICAgICAgICAgIDxoNT5NZWRpY2luZSBTZXJ2aWNlczwvaDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBteS0zIj4KICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZXF1aXJlZCB3aGVuLCBmb3IgZXhhbXBsZSwgdGhlIGZpbmFsIHRleHQgaXMgbm90CiAgICAgICAgICAgICAgICAgIHlldCBhdmFpbGFibGUuIER1bW15IHRleHQgaXMgYWxzbyBrbm93biBhcyAnZmlsbCB0ZXh0Jy4gSXQKICAgICAgICAgICAgICAgICAgaXMgc2FpZCB0aGF0IHNvbmcgY29tcG9zZXJzIG9mIHRoZSBwYXN0IHVzZWQgZHVtbXkgdGV4dHMgYXMKICAgICAgICAgICAgICAgICAgbHlyaWNzLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1wcmltYXJ5IgogICAgICAgICAgICAgICAgICA+TGVhcm4gTW9yZQogICAgICAgICAgICAgICAgICA8YXJyb3ctcmlnaHQtaWNvbiBjbGFzcz0iZmVhIGljb24tc20iPjwvYXJyb3ctcmlnaHQtaWNvbj48L2E+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tZW5kIHRlYiBwYW5lLS0+CgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InRhYi1wYW5lIGZhZGUgYmctd2hpdGUgcC00IHJvdW5kZWQgc2hhZG93IgogICAgICAgICAgICAgIGlkPSJvcnRobyIKICAgICAgICAgICAgICByb2xlPSJ0YWJwYW5lbCIKICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9Im9ydGhvcGFkaWMiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9tZWRpY2FsL29ydGhvcGVkaWMuanBnIgogICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCByb3VuZGVkIHNoYWRvdyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNCI+CiAgICAgICAgICAgICAgICA8aDU+T3J0aG9wYWRpYyBTZXJ2aWNlPC9oNT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG15LTMiPgogICAgICAgICAgICAgICAgICBUaGlzIGlzIHJlcXVpcmVkIHdoZW4sIGZvciBleGFtcGxlLCB0aGUgZmluYWwgdGV4dCBpcyBub3QKICAgICAgICAgICAgICAgICAgeWV0IGF2YWlsYWJsZS4gRHVtbXkgdGV4dCBpcyBhbHNvIGtub3duIGFzICdmaWxsIHRleHQnLiBJdAogICAgICAgICAgICAgICAgICBpcyBzYWlkIHRoYXQgc29uZyBjb21wb3NlcnMgb2YgdGhlIHBhc3QgdXNlZCBkdW1teSB0ZXh0cyBhcwogICAgICAgICAgICAgICAgICBseXJpY3MuCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJ0ZXh0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgID5MZWFybiBNb3JlCiAgICAgICAgICAgICAgICAgIDxhcnJvdy1yaWdodC1pY29uIGNsYXNzPSJmZWEgaWNvbi1zbSI+PC9hcnJvdy1yaWdodC1pY29uPjwvYT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgdGViIHBhbmUtLT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLWVuZCB0YWIgY29udGVudC0tPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8IS0tIEVuZCAtLT4KCiAgPCEtLSBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbiBwdC0wIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InBvc2l0aW9uLXJlbGF0aXZlIiBzdHlsZT0iei1pbmRleDogMSI+CiAgICAgICAgPGRpdiBjbGFzcz0icm91bmRlZCBzaGFkb3cgYmctd2hpdGUgcC00Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyIgaWQ9ImNvdW50ZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY291bnRlci1ib3ggdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJtYi0wIG10LTMiPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY291bnRlci12YWx1ZSIgZGF0YS1jb3VudD0iOTkiPjIxPC9zcGFuPi4wMCUKICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNvdW50ZXItaGVhZCBtYi0xIj5Qb3NpdGl2ZSBmZWVkYmFjazwvaDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj5Gcm9tIERvY3RvcnM8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBjb3VudGVyIGJveC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IG10LTQgcHQtMiBtdC1zbS0wIHB0LXNtLTAiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvdW50ZXItYm94IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ibWItMCBtdC0zIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXItdmFsdWUiIGRhdGEtY291bnQ9IjI1Ij4yPC9zcGFuPisKICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNvdW50ZXItaGVhZCBtYi0xIj5FeHBlcmllbmNlZCBDbGluaWNzPC9oNT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPkhpZ2ggUXVhbGlmaWVkPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgY291bnRlciBib3gtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtdC00IHB0LTIgbXQtc20tMCBwdC1zbS0wIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb3VudGVyLWJveCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICA8aDEgY2xhc3M9Im1iLTAgbXQtMyI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb3VudGVyLXZhbHVlIiBkYXRhLWNvdW50PSIxMTAwIj4zMjE8L3NwYW4+KwogICAgICAgICAgICAgICAgPC9oMT4KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY291bnRlci1oZWFkIG1iLTEiPlF1ZXN0aW9ucyAmIEFuc3dlcnM8L2g1PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+WW91ciBRdWVzdGlvbnM8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBjb3VudGVyIGJveC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLWVuZCByb3ctLT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgcHQtNCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMiBjb2wtbWQtMiBjb2wtNiB0ZXh0LWNlbnRlciBweS00IHBiLW1kLTAiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvY2xpZW50L2FtYXpvbi5zdmciCiAgICAgICAgICAgICAgY2xhc3M9ImF2YXRhciBhdmF0YXItZXgtc20iCiAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTIgY29sLW1kLTIgY29sLTYgdGV4dC1jZW50ZXIgcHktNCBwYi1tZC0wIj4KICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL2NsaWVudC9nb29nbGUuc3ZnIgogICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLWV4LXNtIgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAvPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIGNvbC1tZC0yIGNvbC02IHRleHQtY2VudGVyIHB5LTQgcGItbWQtMCI+CiAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICBzcmM9ImltYWdlcy9jbGllbnQvbGVub3ZvLnN2ZyIKICAgICAgICAgICAgICBjbGFzcz0iYXZhdGFyIGF2YXRhci1leC1zbSIKICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMiBjb2wtbWQtMiBjb2wtNiB0ZXh0LWNlbnRlciBweS00IHBiLW1kLTAiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvY2xpZW50L3BheXBhbC5zdmciCiAgICAgICAgICAgICAgY2xhc3M9ImF2YXRhciBhdmF0YXItZXgtc20iCiAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTIgY29sLW1kLTIgY29sLTYgdGV4dC1jZW50ZXIgcHktNCBwYi1tZC0wIj4KICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgIHNyYz0iaW1hZ2VzL2NsaWVudC9zaG9waWZ5LnN2ZyIKICAgICAgICAgICAgICBjbGFzcz0iYXZhdGFyIGF2YXRhci1leC1zbSIKICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMiBjb2wtbWQtMiBjb2wtNiB0ZXh0LWNlbnRlciBweS00IHBiLW1kLTAiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvY2xpZW50L3Nwb3RpZnkuc3ZnIgogICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIgYXZhdGFyLWV4LXNtIgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAvPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLXBvc3RzLXBsYWNlaG9sZGVyIGJnLXByaW1hcnkiPjwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8IS0tIEVuZCAtLT4KCiAgPCEtLSBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24tdGl0bGUgdGV4dC1jZW50ZXIgbWItNCBwYi0yIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij5PdXIgUXVhbGlmaWVkIERvY3RvcnM8L2g0PgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBwYXJhLWRlc2MgbXgtYXV0byBtYi0wIj4KICAgICAgICAgICAgICBTdGFydCB3b3JraW5nIHdpdGgKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQiPkxhbmRyaWNrPC9zcGFuPiB0aGF0CiAgICAgICAgICAgICAgY2FuIHByb3ZpZGUgZXZlcnl0aGluZyB5b3UgbmVlZCB0byBnZW5lcmF0ZSBhd2FyZW5lc3MsIGRyaXZlCiAgICAgICAgICAgICAgdHJhZmZpYywgY29ubmVjdC4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgPC9kaXY+CiAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgIDxUZWFtIDp0ZWFtRGF0YT0idGVhbURhdGEiIC8+CiAgICA8L2Rpdj4KICAgIDwhLS1lbmQgY29udGFpbmVyLS0+CgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIG10LTEwMCBtdC02MCI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgdGV4dC1jZW50ZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSBtYi00IHBiLTIiPgogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTQiPldoYXQgT3VyIFBhdGllbnRzIFNheXM8L2g0PgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBwYXJhLWRlc2MgbXgtYXV0byBtYi0wIj4KICAgICAgICAgICAgICBTdGFydCB3b3JraW5nIHdpdGgKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQiPkxhbmRyaWNrPC9zcGFuPiB0aGF0CiAgICAgICAgICAgICAgY2FuIHByb3ZpZGUgZXZlcnl0aGluZyB5b3UgbmVlZCB0byBnZW5lcmF0ZSBhd2FyZW5lc3MsIGRyaXZlCiAgICAgICAgICAgICAgdHJhZmZpYywgY29ubmVjdC4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgPC9kaXY+CiAgICAgIDwhLS1lbmQgcm93LS0+CgogICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIG10LTQiPgogICAgICAgICAgPFRlc3RpbW9uaWFsIDp0ZXN0aW1vbmlhbERhdGE9InRlc3RpbW9uaWFsRGF0YSIgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KICAgIDwvZGl2PgogICAgPCEtLWVuZCBjb250YWluZXItLT4KICA8L3NlY3Rpb24+CiAgPCEtLWVuZCBzZWN0aW9uLS0+CiAgPCEtLSBFbmQgLS0+CgogIDwhLS0gU3RhcnQgLS0+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIHB4LTAiPgogICAgPGRpdiBjbGFzcz0icHktNSBiZy1mb290ZXIiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXRpdGxlIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSI+CiAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1zdGV0aG9zY29wZS1hbHQgZGlzcGxheS00IHRleHQtd2hpdGUgdGl0bGUtZGFyayIKICAgICAgICAgICAgICAgID48L2k+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5IG1sLW1kLTQgbWwtMyI+CiAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCB0ZXh0LWxpZ2h0IHRpdGxlLWRhcmsgbWItMSI+CiAgICAgICAgICAgICAgICAgICAgR2V0IGEgZnJlZSBtZWRpY2FsCiAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXdoaXRlLTUwIG1iLTAiPgogICAgICAgICAgICAgICAgICAgIEJ1aWxkIG1vZGVybiBsb29raW5nIHdlYnNpdGVzIGZhc3QgYW5kIGVhc3kgdXNpbmcKICAgICAgICAgICAgICAgICAgICBMYW5kZmxvdy4KICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IG10LTQgbXQtc20tMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtbWQtcmlnaHQgbWwtNSBtbC1zbS0wIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtci0yIG1yLWxnLTIgbXItbWQtMCBteS0yIgogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNwcm9kdWN0dmlldyIKICAgICAgICAgICAgICAgID48aSBjbGFzcz0idWlsIHVpbC1maWxlLWFsdCI+PC9pPiBCb29rIEFuIEFwcG9pbnRtZW50PC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIHJvdy0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCBjb250YWluZXItLT4KICAgIDwvZGl2PgogICAgPCEtLWVuZCBkaXYtLT4KICA8L2Rpdj4KICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwhLS0gRW5kIC0tPgoKICA8Rm9vdGVyIC8+CiAgPCEtLSBGb290ZXIgRW5kIC0tPgogIDxTd2l0Y2hlciAvPgogIDwhLS0gQmFjayB0byB0b3AgLS0+CiAgPGEKICAgIGhyZWY9ImphdmFzY3JpcHQ6IHZvaWQoMCk7IgogICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tcHJpbWFyeSBiYWNrLXRvLXRvcCIKICAgIGlkPSJiYWNrLXRvLXRvcCIKICAgIHYtc2Nyb2xsLXRvPSInI3RvcG5hdiciCiAgPgogICAgPGFycm93LXVwLWljb24gY2xhc3M9Imljb25zIj48L2Fycm93LXVwLWljb24+CiAgPC9hPgogIDwhLS0gQmFjayB0byB0b3AgLS0+CjwvZGl2Pgo="},null]}