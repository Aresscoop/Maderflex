{"remainingRequest":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/manu/Documents/GitHub/Maderflex/src/views/index-hosting.vue?vue&type=template&id=73179212&","dependencies":[{"path":"/Users/manu/Documents/GitHub/Maderflex/src/views/index-hosting.vue","mtime":1610376768000},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/babel-loader/lib/index.js","mtime":1687166098388},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687166106161},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/cache-loader/dist/cjs.js","mtime":1687165589011},{"path":"/Users/manu/Documents/GitHub/Maderflex/node_modules/vue-loader/lib/index.js","mtime":1687166106161}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPE5hdmJhciA6bmF2LWxpZ2h0PSJ0cnVlIiAvPgoKICA8IS0tIEhlcm8gU3RhcnQgLS0+CiAgPHNlY3Rpb24KICAgIGNsYXNzPSJiZy1oYWxmLTI2MCBiZy1wcmltYXJ5IGQtdGFibGUgdy0xMDAiCiAgICBzdHlsZT0iYmFja2dyb3VuZDogdXJsKCdpbWFnZXMvaG9zdGluZy9iZy5wbmcnKSBjZW50ZXIgY2VudGVyIgogICAgaWQ9ImhvbWUiCiAgPgogICAgPGRpdiBjbGFzcz0iYmctb3ZlcmxheSI+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQtNSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPgogICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUtaGVhZGluZyB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxoMSBjbGFzcz0iaGVhZGluZyB0aXRsZS1kYXJrIHRleHQtd2hpdGUgbWItMyI+CiAgICAgICAgICAgICAgQ2xvdWQgU2VydmljZXMgJiBXZWIgSG9zdGluZyBTb2x1dGlvbgogICAgICAgICAgICA8L2gxPgogICAgICAgICAgICA8cCBjbGFzcz0icGFyYS1kZXNjIHBhcmEtZGFyayBteC1hdXRvIHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgIExhdW5jaCB5b3VyIGNhbXBhaWduIGFuZCBiZW5lZml0IGZyb20gb3VyIGV4cGVydGlzZSBvbiBkZXNpZ25pbmcKICAgICAgICAgICAgICBhbmQgbWFuYWdpbmcgY29udmVyc2lvbiBjZW50ZXJlZCBib290c3RyYXA0IGh0bWwgcGFnZS4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00IHB0LTIiPgogICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiCiAgICAgICAgICAgICAgICA+R2V0IFN0YXJ0ZWQ8L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgPC9kaXY+CiAgICAgIDwhLS1lbmQgcm93LS0+CiAgICA8L2Rpdj4KICAgIDwhLS1lbmQgY29udGFpbmVyLS0+CiAgPC9zZWN0aW9uPgogIDwhLS1lbmQgc2VjdGlvbi0tPgogIDxkaXYgY2xhc3M9InBvc2l0aW9uLXJlbGF0aXZlIj4KICAgIDxkaXYgY2xhc3M9InNoYXBlIG92ZXJmbG93LWhpZGRlbiB0ZXh0LWxpZ2h0Ij4KICAgICAgPHN2ZwogICAgICAgIHZpZXdCb3g9IjAgMCAyODgwIDQ4IgogICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICA+CiAgICAgICAgPHBhdGgKICAgICAgICAgIGQ9Ik0wIDQ4SDE0MzcuNUgyODgwVjBIMjE2MEMxNDQyLjUgNTIgNzIwIDAgNzIwIDBIMFY0OFoiCiAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgPjwvcGF0aD4KICAgICAgPC9zdmc+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8IS0tIEhlcm8gRW5kIC0tPgoKICA8IS0tIFNlYXJjaCBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbi10d28gYmctbGlnaHQiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMCI+CiAgICAgICAgICA8Zm9ybSBjbGFzcz0icC00IHNoYWRvdyBiZy13aGl0ZSByb3VuZGVkIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJtYi0zIj5TZWFyY2ggWW91ciBEb21haW4gTm93PC9oND4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgZm9ybS1ncm91cCBtYi0wIj4KICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgbmFtZT0ibmFtZSIKICAgICAgICAgICAgICAgICAgICBpZD0ibmFtZSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgcm91bmRlZC1sZWZ0IgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJZb3VyIGRvbWFpbiBuYW1lIDoiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLWFwcGVuZCIgaWQ9ImJ1dHRvbi1hZGRvbjQiPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCByb3VuZGVkLTAiIGlkPSJkb21haW5fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPi5pbjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4uY29tPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPi5vcmc8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+Lm5ldDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4uaW5mbzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4ubWU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJzZWFyY2giCiAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJzZWFyY2giCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoYnRuIGJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2siCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iU2VhcmNoIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIGNvbC1tZC00IGNvbC02IG10LTQiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9InRleHQtZGFyayI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdW5kZWQgc2hhZG93IGJnLXdoaXRlIHAtMSB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgIC5pbiA8YnIgLz48c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5Ij4kNC45OTwvc3Bhbj4veWVhcgogICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIGNvbC1tZC00IGNvbC02IG10LTQiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9InRleHQtZGFyayI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdW5kZWQgc2hhZG93IGJnLXdoaXRlIHAtMSB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgIC5jb20gPGJyIC8+PHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSI+JDUuOTk8L3NwYW4+L3llYXIKICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMiBjb2wtbWQtNCBjb2wtNiBtdC00Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJ0ZXh0LWRhcmsiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3VuZGVkIHNoYWRvdyBiZy13aGl0ZSBwLTEgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAub3JnIDxiciAvPjxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkiPiQ2Ljk5PC9zcGFuPi95ZWFyCiAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTIgY29sLW1kLTQgY29sLTYgbXQtNCI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0idGV4dC1kYXJrIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm91bmRlZCBzaGFkb3cgYmctd2hpdGUgcC0xIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgLm5ldCA8YnIgLz48c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5Ij4kNy45OTwvc3Bhbj4veWVhcgogICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIGNvbC1tZC00IGNvbC02IG10LTQiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9InRleHQtZGFyayI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdW5kZWQgc2hhZG93IGJnLXdoaXRlIHAtMSB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgIC5pbmZvIDxiciAvPjxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkiPiQzLjk5PC9zcGFuPi95ZWFyCiAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTIgY29sLW1kLTQgY29sLTYgbXQtNCI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0idGV4dC1kYXJrIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm91bmRlZCBzaGFkb3cgYmctd2hpdGUgcC0xIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgLm1lIDxiciAvPjxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkiPiQyLjk5PC9zcGFuPi95ZWFyCiAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICA8IS0tZW5kIGZvcm0tLT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KICAgIDwvZGl2PgogICAgPCEtLWVuZCBjb250YWluZXItLT4KICA8L3NlY3Rpb24+CiAgPCEtLWVuZCBzZWN0aW9uLS0+CiAgPCEtLSBTZWFyY2ggRW5kIC0tPgoKICA8IS0tIFN0YXJ0IFNlcnZpY2VzIC0tPgogIDxzZWN0aW9uIGNsYXNzPSJzZWN0aW9uIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBwYi1sZy00IG1iLW1kLTUgbWItNCI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbWItNCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTkgY29sLW1kLTggdGV4dC1zbS1sZWZ0Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24tdGl0bGUiPgogICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIG1iLTQiPkNsb3VkIEhvc3RpbmcgU2VydmljZXM8L2g0PgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBwYXJhLWRlc2MgbWItMCI+CiAgICAgICAgICAgICAgU3RhcnQgd29ya2luZyB3aXRoCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkIj5MYW5kcmljazwvc3Bhbj4gdGhhdAogICAgICAgICAgICAgIGNhbiBwcm92aWRlIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8gZ2VuZXJhdGUgYXdhcmVuZXNzLCBkcml2ZQogICAgICAgICAgICAgIHRyYWZmaWMsIGNvbm5lY3QuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgIDxkaXYKICAgICAgICAgIGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtNCBtdC00IG10LXNtLTAgdGV4dC1zbS1yaWdodCBwdC0yIHB0LXNtLTAiCiAgICAgICAgPgogICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IgogICAgICAgICAgICA+UmVhZCBtb3JlIDxpIGNsYXNzPSJtZGkgbWRpLWNoZXZyb24tcmlnaHQiPjwvaQogICAgICAgICAgPjwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KCiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdgogICAgICAgICAgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC02IGNvbC0xMiBtdC01IHB0LTMiCiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBvZiBob3N0aW5nU2VydmljZSIKICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgID4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1hZ2UgcG9zaXRpb24tcmVsYXRpdmUgZC1pbmxpbmUtYmxvY2siPgogICAgICAgICAgICAgIDxpIDpjbGFzcz0iYCR7aXRlbS5pY29ufSBoMSB0ZXh0LXByaW1hcnlgIj48L2k+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCBtdC00Ij4KICAgICAgICAgICAgICA8aDU+e3sgaXRlbS50aXRsZSB9fTwvaDU+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQiPnt7IGl0ZW0uZGVzY3JpcHRpb24gfX08L3A+CiAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGV4dC1zdWNjZXNzIgogICAgICAgICAgICAgICAgPlJlYWQgbW9yZSA8aSBjbGFzcz0ibWRpIG1kaS1jaGV2cm9uLXJpZ2h0Ij48L2kKICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICA8ZGl2IGNsYXNzPSJzaGFwZSBvdmVyZmxvdy1oaWRkZW4gdGV4dC1saWdodCI+CiAgICAgIDxzdmcKICAgICAgICB2aWV3Qm94PSIwIDAgMjg4MCAyNTAiCiAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgID4KICAgICAgICA8cGF0aAogICAgICAgICAgZD0iTTcyMCAxMjVMMjE2MCAwSDI4ODBWMjUwSDBWMTI1SDcyMFoiCiAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgPjwvcGF0aD4KICAgICAgPC9zdmc+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8IS0tIEVuZCBTZXJ2aWNlcyAtLT4KCiAgPCEtLSBIb3cgSXQgV29yayBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbiBiZy1saWdodCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNSBjb2wtbWQtNiI+CiAgICAgICAgICA8aW1nIHNyYz0iaW1hZ2VzL2hvc3RpbmcvMS5wbmciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iIiAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy03IGNvbC1tZC02IG10LTQgbXQtc20tMCBwdC0yIHB0LXNtLTAiPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSBtbC1sZy01Ij4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij4KICAgICAgICAgICAgICBHZXQgYmVzdCBwbGFuIGZvciBtb3JlIHBvd2VyIHdpdGggY2xvdWQgSG9zdGluZwogICAgICAgICAgICA8L2g0PgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgWW91IGNhbiBjb21iaW5lIGFsbCB0aGUgTGFuZHJpY2sgdGVtcGxhdGVzIGludG8gYSBzaW5nbGUgb25lLAogICAgICAgICAgICAgIHlvdSBjYW4gdGFrZSBhIGNvbXBvbmVudCBmcm9tIHRoZSBBcHBsaWNhdGlvbiB0aGVtZSBhbmQgdXNlIGl0CiAgICAgICAgICAgICAgaW4gdGhlIFdlYnNpdGUuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIj48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICA+RGlnaXRhbCBNYXJrZXRpbmcgU29sdXRpb25zIGZvciBUb21vcnJvdwogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgID5PdXIgVGFsZW50ZWQgJiBFeHBlcmllbmNlZCBNYXJrZXRpbmcgQWdlbmN5CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSI+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgPkNyZWF0ZSB5b3VyIG93biBza2luIHRvIG1hdGNoIHlvdXIgYnJhbmQKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG10LTMiCiAgICAgICAgICAgICAgPkdldCBTdGFydGVkIDxpIGNsYXNzPSJtZGkgbWRpLWNoZXZyb24tcmlnaHQiPjwvaQogICAgICAgICAgICA+PC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgPC9kaXY+CiAgICAgIDwhLS1lbmQgcm93LS0+CiAgICA8L2Rpdj4KICAgIDwhLS1lbmQgY29udGFpbmVyLS0+CgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIG10LTEwMCBtdC02MCI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgIDxkaXYKICAgICAgICAgIGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtNiBvcmRlci0yIG9yZGVyLW1kLTEgbXQtNCBtdC1zbS0wIHB0LTIgcHQtc20tMCIKICAgICAgICA+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLXRpdGxlIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij4KICAgICAgICAgICAgICBEb24ndCBDb21wcm9taXNlIHdpdGggdGhlIGJlc3Qgd2ViIGhvc3Rpbmcgc29sdXRpb25zCiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICBVc2luZyBMYW5kcmljayB0byBidWlsZCB5b3VyIHNpdGUgbWVhbnMgbmV2ZXIgd29ycnlpbmcgYWJvdXQKICAgICAgICAgICAgICBkZXNpZ25pbmcgYW5vdGhlciBwYWdlIG9yIGNyb3NzIGJyb3dzZXIgY29tcGF0aWJpbGl0eS4gT3VyCiAgICAgICAgICAgICAgZXZlci1ncm93aW5nIGxpYnJhcnkgb2YgY29tcG9uZW50cyBhbmQgcHJlLWRlc2lnbmVkIGxheW91dHMgd2lsbAogICAgICAgICAgICAgIG1ha2UgeW91ciBsaWZlIGVhc2llci4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgID5EaWdpdGFsIE1hcmtldGluZyBTb2x1dGlvbnMgZm9yIFRvbW9ycm93CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSI+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgPk91ciBUYWxlbnRlZCAmIEV4cGVyaWVuY2VkIE1hcmtldGluZyBBZ2VuY3kKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIj48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICA+Q3JlYXRlIHlvdXIgb3duIHNraW4gdG8gbWF0Y2ggeW91ciBicmFuZAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbXQtMyIKICAgICAgICAgICAgICA+R2V0IFN0YXJ0ZWQgPGkgY2xhc3M9Im1kaSBtZGktY2hldnJvbi1yaWdodCI+PC9pCiAgICAgICAgICAgID48L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtNiBvcmRlci0xIG9yZGVyLW1kLTIiPgogICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ob3N0aW5nL2RlYWwtaGVuZC5zdmciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iIiAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBtdC0xMDAgbXQtNjAiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNSBjb2wtbWQtNiI+CiAgICAgICAgICA8aW1nIHNyYz0iaW1hZ2VzL2hvc3RpbmcvMi5wbmciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iIiAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy03IGNvbC1tZC02IG10LTQgbXQtc20tMCBwdC0yIHB0LXNtLTAiPgogICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSBtbC1sZy01Ij4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij4KICAgICAgICAgICAgICBQb3dlcmZ1bCBTZXJ2ZXIgJiBXZWIgSG9zdGluZyBQbGF0ZWZvcm0KICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQiPgogICAgICAgICAgICAgIFlvdSBjYW4gY29tYmluZSBhbGwgdGhlIExhbmRyaWNrIHRlbXBsYXRlcyBpbnRvIGEgc2luZ2xlIG9uZSwKICAgICAgICAgICAgICB5b3UgY2FuIHRha2UgYSBjb21wb25lbnQgZnJvbSB0aGUgQXBwbGljYXRpb24gdGhlbWUgYW5kIHVzZSBpdAogICAgICAgICAgICAgIGluIHRoZSBXZWJzaXRlLgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSI+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgPkRpZ2l0YWwgTWFya2V0aW5nIFNvbHV0aW9ucyBmb3IgVG9tb3Jyb3cKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIj48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICA+T3VyIFRhbGVudGVkICYgRXhwZXJpZW5jZWQgTWFya2V0aW5nIEFnZW5jeQogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgID5DcmVhdGUgeW91ciBvd24gc2tpbiB0byBtYXRjaCB5b3VyIGJyYW5kCiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtdC0zIgogICAgICAgICAgICAgID5HZXQgU3RhcnRlZCA8aSBjbGFzcz0ibWRpIG1kaS1jaGV2cm9uLXJpZ2h0Ij48L2kKICAgICAgICAgICAgPjwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICA8ZGl2IGNsYXNzPSJzaGFwZSBvdmVyZmxvdy1oaWRkZW4gdGV4dC13aGl0ZSI+CiAgICAgIDxzdmcKICAgICAgICB2aWV3Qm94PSIwIDAgMjg4MCAyNTAiCiAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgID4KICAgICAgICA8cGF0aAogICAgICAgICAgZD0iTTcyMCAxMjVMMjE2MCAwSDI4ODBWMjUwSDBWMTI1SDcyMFoiCiAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgPjwvcGF0aD4KICAgICAgPC9zdmc+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8IS0tIEhvdyBJdCBXb3JrIEVuZCAtLT4KCiAgPCEtLSBQcmljZSBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHRleHQtY2VudGVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24tdGl0bGUgbWItNCBwYi0yIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij5PdXIgSG9zdGluZyBSYXRlczwvaDQ+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIHBhcmEtZGVzYyBteC1hdXRvIG1iLTAiPgogICAgICAgICAgICAgIFN0YXJ0IHdvcmtpbmcgd2l0aAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCI+TGFuZHJpY2s8L3NwYW4+IHRoYXQKICAgICAgICAgICAgICBjYW4gcHJvdmlkZSBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGdlbmVyYXRlIGF3YXJlbmVzcywgZHJpdmUKICAgICAgICAgICAgICB0cmFmZmljLCBjb25uZWN0LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KCiAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iIj4KICAgICAgICAgICAgPGItdGFicwogICAgICAgICAgICAgIHBpbGxzCiAgICAgICAgICAgICAganVzdGlmaWVkCiAgICAgICAgICAgICAgbmF2LWNsYXNzPSJkLWlubGluZS1ibG9jayBib3JkZXIgcHktMSBweC0yIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICBuYXYtd3JhcHBlci1jbGFzcz0idGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgYWxpZ249ImNlbnRlciIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxiLXRhYgogICAgICAgICAgICAgICAgdGl0bGUtaXRlbS1jbGFzcz0iZC1pbmxpbmUtYmxvY2siCiAgICAgICAgICAgICAgICB0aXRsZS1saW5rLWNsYXNzPSJweC0zIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPiBNb250aGx5IDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtNiBjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcmljaW5nLXJhdGVzIGJnLWxpZ2h0IHB5LTUgcC00IHJvdW5kZWQiPgogICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0aXRsZSB0ZXh0LXVwcGVyY2FzZSBmb250LXdlaWdodC1ib2xkIG1iLTQiPgogICAgICAgICAgICAgICAgICAgICAgICBDbG91ZCBIb3N0aW5nCiAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG1iLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaDQgbWItMCBtdC0yIj4kPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UgaDEgbWItMCI+MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Img0IGFsaWduLXNlbGYtZW5kIG1iLTEiPi9tbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIHBsLTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgID4yIEdCIE1lbW9yeQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgID4xMCBGcmVlIE9wdGltaXphdGlvbgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgID4yNC83IHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA+Q29udGVudCBPcHRpbWl6YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbXQtNCIKICAgICAgICAgICAgICAgICAgICAgICAgPkJ1eSBOb3c8L2EKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtNiBjb2wtMTIgbXQtNCBwdC0yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2FyZCBwcmljaW5nLXJhdGVzIHN0YXJ0ZXItcGxhbiBiZy13aGl0ZSBzaGFkb3cgcm91bmRlZCBib3JkZXItMCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcHktNSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0aXRsZSB0ZXh0LXVwcGVyY2FzZSBmb250LXdlaWdodC1ib2xkIHRleHQtcHJpbWFyeSBtYi00IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgRGVkaWNhdGVkIEhvc3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG1iLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoNCBtYi0wIG10LTIiPiQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGgxIG1iLTAiPjM5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoNCBhbGlnbi1zZWxmLWVuZCBtYi0xIj4vbW88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAgcGwtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjQgR0IgTWVtb3J5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+MTAgRnJlZSBPcHRpbWl6YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID4yNC83IHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Db250ZW50IE9wdGltaXphdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG10LTQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPkdldCBTdGFydGVkPC9hCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC02IGNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgcHJpY2luZy1yYXRlcyBiZy1saWdodCByb3VuZGVkIGJvcmRlci0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBweS01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRpdGxlIHRleHQtdXBwZXJjYXNlIGZvbnQtd2VpZ2h0LWJvbGQgbWItNCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIFZQUyBIb3N0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBtYi00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaDQgbWItMCBtdC0yIj4kPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcmljZSBoMSBtYi0wIj41OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaDQgYWxpZ24tc2VsZi1lbmQgbWItMSI+L21vPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIHBsLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID44IEdCIE1lbW9yeQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjEwIEZyZWUgT3B0aW1pemF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+MjQvNyBzdXBwb3J0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+Q29udGVudCBPcHRpbWl6YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtdC00IgogICAgICAgICAgICAgICAgICAgICAgICAgID5CdXkgTm93PC9hCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC02IGNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgcHJpY2luZy1yYXRlcyBiZy1saWdodCByb3VuZGVkIGJvcmRlci0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBweS01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRpdGxlIHRleHQtdXBwZXJjYXNlIGZvbnQtd2VpZ2h0LWJvbGQgbWItNCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIFNoYXJlZCBIb3N0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBtYi00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaDQgbWItMCBtdC0yIj4kPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcmljZSBoMSBtYi0wIj43OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaDQgYWxpZ24tc2VsZi1lbmQgbWItMSI+L21vPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBtYi0wIHBsLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID4xNiBHQiBNZW1vcnkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID4xMCBGcmVlIE9wdGltaXphdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjI0Lzcgc3VwcG9ydAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPkNvbnRlbnQgT3B0aW1pemF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbXQtNCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+QnV5IE5vdzwvYQogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS1lbmQgcm93LS0+CiAgICAgICAgICAgICAgPC9iLXRhYj4KICAgICAgICAgICAgICA8Yi10YWIKICAgICAgICAgICAgICAgIHRpdGxlLWl0ZW0tY2xhc3M9ImQtaW5saW5lLWJsb2NrIgogICAgICAgICAgICAgICAgdGl0bGUtbGluay1jbGFzcz0icHgtMyByb3VuZGVkLXBpbGwiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT4KICAgICAgICAgICAgICAgICAgWWVhcmx5CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXN1Y2Nlc3MiPjE1JSBPZmYgPC9zcGFuPgogICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC02IGNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByaWNpbmctcmF0ZXMgYmctbGlnaHQgcHktNSBwLTQgcm91bmRlZCI+CiAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRpdGxlIHRleHQtdXBwZXJjYXNlIGZvbnQtd2VpZ2h0LWJvbGQgbWItNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIENsb3VkIEhvc3RpbmcKICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggbWItNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoNCBtYi0wIG10LTIiPiQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcmljZSBoMSBtYi0wIj4wPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaDQgYWxpZ24tc2VsZi1lbmQgbWItMSI+L21vPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAgcGwtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjIgR0IgTWVtb3J5CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjEwIEZyZWUgT3B0aW1pemF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjI0Lzcgc3VwcG9ydAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgID5Db250ZW50IE9wdGltaXphdGlvbgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtdC00IgogICAgICAgICAgICAgICAgICAgICAgICA+QnV5IE5vdzwvYQogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC02IGNvbC0xMiBtdC00IHB0LTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkIHByaWNpbmctcmF0ZXMgc3RhcnRlci1wbGFuIGJnLXdoaXRlIHNoYWRvdyByb3VuZGVkIGJvcmRlci0wIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBweS01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRpdGxlIHRleHQtdXBwZXJjYXNlIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1wcmltYXJ5IG1iLTQiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICBEZWRpY2F0ZWQgSG9zdGluZwogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggbWItNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Img0IG1iLTAgbXQtMiI+JDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UgaDEgbWItMCI+Mjk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Img0IGFsaWduLXNlbGYtZW5kIG1iLTEiPi9tbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCBwbC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+NCBHQiBNZW1vcnkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID4xMCBGcmVlIE9wdGltaXphdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjI0Lzcgc3VwcG9ydAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPkNvbnRlbnQgT3B0aW1pemF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbXQtNCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+R2V0IFN0YXJ0ZWQ8L2EKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTYgY29sLTEyIG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBwcmljaW5nLXJhdGVzIGJnLWxpZ2h0IHJvdW5kZWQgYm9yZGVyLTAiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHB5LTUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGl0bGUgdGV4dC11cHBlcmNhc2UgZm9udC13ZWlnaHQtYm9sZCBtYi00IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgVlBTIEhvc3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG1iLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoNCBtYi0wIG10LTIiPiQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGgxIG1iLTAiPjM5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoNCBhbGlnbi1zZWxmLWVuZCBtYi0xIj4vbW88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAgcGwtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjggR0IgTWVtb3J5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+MTAgRnJlZSBPcHRpbWl6YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID4yNC83IHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgaDUgbXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVpbCB1aWwtY2hlY2stY2lyY2xlIGFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Db250ZW50IE9wdGltaXphdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG10LTQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPkJ1eSBOb3c8L2EKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tZW5kIGNvbC0tPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTYgY29sLTEyIG10LTQgcHQtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBwcmljaW5nLXJhdGVzIGJnLWxpZ2h0IHJvdW5kZWQgYm9yZGVyLTAiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHB5LTUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGl0bGUgdGV4dC11cHBlcmNhc2UgZm9udC13ZWlnaHQtYm9sZCBtYi00IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgU2hhcmVkIEhvc3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG1iLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoNCBtYi0wIG10LTIiPiQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGgxIG1iLTAiPjQ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoNCBhbGlnbi1zZWxmLWVuZCBtYi0xIj4vbW88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIG1iLTAgcGwtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjE2IEdCIE1lbW9yeQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtcHJpbWFyeSBoNSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idWlsIHVpbC1jaGVjay1jaXJjbGUgYWxpZ24tbWlkZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjEwIEZyZWUgT3B0aW1pemF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+MjQvNyBzdXBwb3J0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtbXV0ZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1wcmltYXJ5IGg1IG1yLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1aWwgdWlsLWNoZWNrLWNpcmNsZSBhbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+Q29udGVudCBPcHRpbWl6YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtdC00IgogICAgICAgICAgICAgICAgICAgICAgICAgID5CdXkgTm93PC9hCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPCEtLWVuZCBjb2wtLT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLWVuZCByb3ctLT4KICAgICAgICAgICAgICA8L2ItdGFiPgogICAgICAgICAgICA8L2ItdGFicz4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICA8ZGl2IGNsYXNzPSJzaGFwZSBvdmVyZmxvdy1oaWRkZW4gdGV4dC1saWdodCI+CiAgICAgIDxzdmcKICAgICAgICB2aWV3Qm94PSIwIDAgMjg4MCAyNTAiCiAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgID4KICAgICAgICA8cGF0aAogICAgICAgICAgZD0iTTcyMCAxMjVMMjE2MCAwSDI4ODBWMjUwSDBWMTI1SDcyMFoiCiAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgPjwvcGF0aD4KICAgICAgPC9zdmc+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8IS0tIFByaWNlIEVuZCAtLT4KCiAgPCEtLSBUZXN0aSBTdGFydCAtLT4KICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbiBwdC1tZC00IHB0LTUgcHQtc20tMCBiZy1saWdodCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgcGItbGctNCBtYi1tZC01IG1iLTQiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHRleHQtY2VudGVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24tdGl0bGUgbWItNCBwYi0yIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSBtYi00Ij5DbGllbnQgUmV2aWV3czwvaDQ+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIHBhcmEtZGVzYyBteC1hdXRvIG1iLTAiPgogICAgICAgICAgICAgIFN0YXJ0IHdvcmtpbmcgd2l0aAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCI+TGFuZHJpY2s8L3NwYW4+IHRoYXQKICAgICAgICAgICAgICBjYW4gcHJvdmlkZSBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGdlbmVyYXRlIGF3YXJlbmVzcywgZHJpdmUKICAgICAgICAgICAgICB0cmFmZmljLCBjb25uZWN0LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tZW5kIGNvbC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLWVuZCByb3ctLT4KCiAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIgbXQtNCI+CiAgICAgICAgICA8VGVzdGltb25pYWwgOnRlc3RpbW9uaWFsRGF0YT0idGVzdGltb25pYWxEYXRhIiAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1lbmQgY29sLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tZW5kIHJvdy0tPgogICAgPC9kaXY+CiAgICA8IS0tZW5kIGNvbnRhaW5lci0tPgogIDwvc2VjdGlvbj4KICA8IS0tZW5kIHNlY3Rpb24tLT4KICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICA8ZGl2IGNsYXNzPSJzaGFwZSBvdmVyZmxvdy1oaWRkZW4gdGV4dC1mb290ZXIiPgogICAgICA8c3ZnCiAgICAgICAgdmlld0JveD0iMCAwIDI4ODAgMjUwIgogICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICA+CiAgICAgICAgPHBhdGgKICAgICAgICAgIGQ9Ik03MjAgMTI1TDIxNjAgMEgyODgwVjI1MEgwVjEyNUg3MjBaIgogICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIgogICAgICAgID48L3BhdGg+CiAgICAgIDwvc3ZnPgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBUZXN0aSBFbmQgLS0+CiAgPCEtLWVuZCBzZWN0aW9uLS0+CiAgPEZvb3RlciAvPgogIDwhLS0gRm9vdGVyIEVuZCAtLT4KICA8U3dpdGNoZXIgLz4KICA8IS0tIEJhY2sgdG8gdG9wIC0tPgogIDxhCiAgICBocmVmPSJqYXZhc2NyaXB0OiB2b2lkKDApOyIKICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLXByaW1hcnkgYmFjay10by10b3AiCiAgICBpZD0iYmFjay10by10b3AiCiAgICB2LXNjcm9sbC10bz0iJyN0b3BuYXYnIgogID4KICAgIDxhcnJvdy11cC1pY29uIGNsYXNzPSJpY29ucyI+PC9hcnJvdy11cC1pY29uPgogIDwvYT4KICA8IS0tIEJhY2sgdG8gdG9wIC0tPgo8L2Rpdj4K"},null]}